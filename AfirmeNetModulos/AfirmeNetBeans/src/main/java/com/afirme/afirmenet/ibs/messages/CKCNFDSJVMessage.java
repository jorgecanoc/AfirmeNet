package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CKCNFDSJV physical file
 * definition.
 * 
 * File level identifier is 1001011151454. Record format level identifier is
 * 4C7FCEFB54FAC.
 */

public class CKCNFDSJVMessage extends MessageRecord {
	final int FIELDCOUNT = 7;
	private CharacterField fieldCKCUSR = null;
	private DecimalField fieldCKCACC = null;
	private DecimalField fieldCKCNUM = null;
	private DecimalField fieldCKCDT1 = null;
	private DecimalField fieldCKCDT2 = null;
	private DecimalField fieldCKCDT3 = null;
	private CharacterField fieldCKCSTA = null;

	/**
	 * Constructor for CKCNFDSJVMessage.
	 */
	public CKCNFDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */

	protected void createFields() {
		recordsize = 43;
		fileid = "1001011151454";
		recordid = "4C7FCEFB54FAC";
		message = new byte[getByteLength()];
		formatname = "CKCNFDSJV";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "CKCUSR";
		tagnames[0] = "CKCUSR";
		fields[0] = fieldCKCUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "CKCUSR");
		fieldnames[1] = "CKCACC";
		tagnames[1] = "CKCACC";
		fields[1] = fieldCKCACC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "CKCACC");
		fieldnames[2] = "CKCNUM";
		tagnames[2] = "CKCNUM";
		fields[2] = fieldCKCNUM = new DecimalField(message, HEADERSIZE + 23,
				10, 0, "CKCNUM");
		fieldnames[3] = "CKCDT1";
		tagnames[3] = "CKCDT1";
		fields[3] = fieldCKCDT1 = new DecimalField(message, HEADERSIZE + 33, 3,
				0, "CKCDT1");
		fieldnames[4] = "CKCDT2";
		tagnames[4] = "CKCDT2";
		fields[4] = fieldCKCDT2 = new DecimalField(message, HEADERSIZE + 36, 3,
				0, "CKCDT2");
		fieldnames[5] = "CKCDT3";
		tagnames[5] = "CKCDT3";
		fields[5] = fieldCKCDT3 = new DecimalField(message, HEADERSIZE + 39, 3,
				0, "CKCDT3");
		fieldnames[6] = "CKCSTA";
		tagnames[6] = "CKCSTA";
		fields[6] = fieldCKCSTA = new CharacterField(message, HEADERSIZE + 42,
				1, "CKCSTA");
	}

	/**
	 * Return value of numeric field CKCACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCKCACC() {
		return fieldCKCACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field CKCDT1 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCKCDT1() {
		return fieldCKCDT1.getBigDecimal();
	}

	/**
	 * Return value of numeric field CKCDT2 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCKCDT2() {
		return fieldCKCDT2.getBigDecimal();
	}

	/**
	 * Return value of numeric field CKCDT3 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCKCDT3() {
		return fieldCKCDT3.getBigDecimal();
	}

	/**
	 * Return value of numeric field CKCNUM as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCKCNUM() {
		return fieldCKCNUM.getBigDecimal();
	}

	/**
	 * Get value of field CKCACC as a String.
	 */
	public String getCKCACC() {
		return fieldCKCACC.getString();
	}

	/**
	 * Get value of field CKCDT1 as a String.
	 */
	public String getCKCDT1() {
		return fieldCKCDT1.getString();
	}

	/**
	 * Get value of field CKCDT2 as a String.
	 */
	public String getCKCDT2() {
		return fieldCKCDT2.getString();
	}

	/**
	 * Get value of field CKCDT3 as a String.
	 */
	public String getCKCDT3() {
		return fieldCKCDT3.getString();
	}

	/**
	 * Get value of field CKCNUM as a String.
	 */
	public String getCKCNUM() {
		return fieldCKCNUM.getString();
	}

	/**
	 * Get value of field CKCSTA as a String.
	 */
	public String getCKCSTA() {
		return fieldCKCSTA.getString();
	}

	/**
	 * Get value of field CKCUSR as a String.
	 */
	public String getCKCUSR() {
		return fieldCKCUSR.getString();
	}

	/**
	 * Set field CKCACC using a String value.
	 */
	public void setCKCACC(String newvalue) {
		fieldCKCACC.setString(newvalue);
	}

	/**
	 * Set numeric field CKCACC using a BigDecimal value.
	 */
	public void setCKCACC(BigDecimal newvalue) {
		fieldCKCACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field CKCDT1 using a String value.
	 */
	public void setCKCDT1(String newvalue) {
		fieldCKCDT1.setString(newvalue);
	}

	/**
	 * Set numeric field CKCDT1 using a BigDecimal value.
	 */
	public void setCKCDT1(BigDecimal newvalue) {
		fieldCKCDT1.setBigDecimal(newvalue);
	}

	/**
	 * Set field CKCDT2 using a String value.
	 */
	public void setCKCDT2(String newvalue) {
		fieldCKCDT2.setString(newvalue);
	}

	/**
	 * Set numeric field CKCDT2 using a BigDecimal value.
	 */
	public void setCKCDT2(BigDecimal newvalue) {
		fieldCKCDT2.setBigDecimal(newvalue);
	}

	/**
	 * Set field CKCDT3 using a String value.
	 */
	public void setCKCDT3(String newvalue) {
		fieldCKCDT3.setString(newvalue);
	}

	/**
	 * Set numeric field CKCDT3 using a BigDecimal value.
	 */
	public void setCKCDT3(BigDecimal newvalue) {
		fieldCKCDT3.setBigDecimal(newvalue);
	}

	/**
	 * Set field CKCNUM using a String value.
	 */
	public void setCKCNUM(String newvalue) {
		fieldCKCNUM.setString(newvalue);
	}

	/**
	 * Set numeric field CKCNUM using a BigDecimal value.
	 */
	public void setCKCNUM(BigDecimal newvalue) {
		fieldCKCNUM.setBigDecimal(newvalue);
	}

	/**
	 * Set field CKCSTA using a String value.
	 */
	public void setCKCSTA(String newvalue) {
		fieldCKCSTA.setString(newvalue);
	}

	/**
	 * Set field CKCUSR using a String value.
	 */
	public void setCKCUSR(String newvalue) {
		fieldCKCUSR.setString(newvalue);
	}
}