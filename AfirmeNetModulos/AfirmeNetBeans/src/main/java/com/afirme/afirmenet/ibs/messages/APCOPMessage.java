package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from APCOP physical file
 * definition.
 * 
 * File level identifier is 1000516091545. Record format level identifier is
 * 4F5CDD3649143.
 */

public class APCOPMessage extends MessageRecord {
	final int FIELDCOUNT = 12;
	private CharacterField fieldAPCUSR = null;
	private CharacterField fieldAPCTYP = null;
	private DecimalField fieldAPCAMT = null;
	private DecimalField fieldAPCACC = null;
	private CharacterField fieldAPCSPI = null;
	private CharacterField fieldAPCSP2 = null;
	private CharacterField fieldAPCSP3 = null;
	private DecimalField fieldAPCMPY = null;
	private DecimalField fieldAPCRPY = null;
	private DecimalField fieldAPCUPY = null;
	private DecimalField fieldAPCHPN = null;
	private DecimalField fieldAPCPHN = null;

	/**
	 * Constructor for APCOPMessage.
	 */
	public APCOPMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 185;
		fileid = "1000516091545";
		recordid = "4F5CDD3649143";
		message = new byte[getByteLength()];
		formatname = "APCOP";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "APCUSR";
		tagnames[0] = "APCUSR";
		fields[0] = fieldAPCUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "APCUSR");
		fieldnames[1] = "APCTYP";
		tagnames[1] = "APCTYP";
		fields[1] = fieldAPCTYP = new CharacterField(message, HEADERSIZE + 10,
				25, "APCTYP");
		fieldnames[2] = "APCAMT";
		tagnames[2] = "APCAMT";
		fields[2] = fieldAPCAMT = new DecimalField(message, HEADERSIZE + 35,
				15, 2, "APCAMT");
		fieldnames[3] = "APCACC";
		tagnames[3] = "APCACC";
		fields[3] = fieldAPCACC = new DecimalField(message, HEADERSIZE + 50,
				10, 0, "APCACC");
		fieldnames[4] = "APCSPI";
		tagnames[4] = "APCSPI";
		fields[4] = fieldAPCSPI = new CharacterField(message, HEADERSIZE + 60,
				30, "APCSPI");
		fieldnames[5] = "APCSP2";
		tagnames[5] = "APCSP2";
		fields[5] = fieldAPCSP2 = new CharacterField(message, HEADERSIZE + 90,
				30, "APCSP2");
		fieldnames[6] = "APCSP3";
		tagnames[6] = "APCSP3";
		fields[6] = fieldAPCSP3 = new CharacterField(message, HEADERSIZE + 120,
				30, "APCSP3");
		fieldnames[7] = "APCMPY";
		tagnames[7] = "APCMPY";
		fields[7] = fieldAPCMPY = new DecimalField(message, HEADERSIZE + 150,
				3, 0, "APCMPY");
		fieldnames[8] = "APCRPY";
		tagnames[8] = "APCRPY";
		fields[8] = fieldAPCRPY = new DecimalField(message, HEADERSIZE + 153,
				3, 0, "APCRPY");
		fieldnames[9] = "APCUPY";
		tagnames[9] = "APCUPY";
		fields[9] = fieldAPCUPY = new DecimalField(message, HEADERSIZE + 156,
				5, 0, "APCUPY");
		fieldnames[10] = "APCHPN";
		tagnames[10] = "APCHPN";
		fields[10] = fieldAPCHPN = new DecimalField(message, HEADERSIZE + 161,
				12, 0, "APCHPN");
		fieldnames[11] = "APCPHN";
		tagnames[11] = "APCPHN";
		fields[11] = fieldAPCPHN = new DecimalField(message, HEADERSIZE + 173,
				12, 0, "APCPHN");
	}

	/**
	 * Get value of field APCACC as a String.
	 */
	public String getAPCACC() {
		return fieldAPCACC.getString();
	}

	/**
	 * Get value of field APCAMT as a String.
	 */
	public String getAPCAMT() {
		return fieldAPCAMT.getString();
	}

	/**
	 * Get value of field APCHPN as a String.
	 */
	public String getAPCHPN() {
		return fieldAPCHPN.getString();
	}

	/**
	 * Get value of field APCMPY as a String.
	 */
	public String getAPCMPY() {
		return fieldAPCMPY.getString();
	}

	/**
	 * Get value of field APCPHN as a String.
	 */
	public String getAPCPHN() {
		return fieldAPCPHN.getString();
	}

	/**
	 * Get value of field APCRPY as a String.
	 */
	public String getAPCRPY() {
		return fieldAPCRPY.getString();
	}

	/**
	 * Get value of field APCSP2 as a String.
	 */
	public String getAPCSP2() {
		return fieldAPCSP2.getString();
	}

	/**
	 * Get value of field APCSP3 as a String.
	 */
	public String getAPCSP3() {
		return fieldAPCSP3.getString();
	}

	/**
	 * Get value of field APCSPI as a String.
	 */
	public String getAPCSPI() {
		return fieldAPCSPI.getString();
	}

	/**
	 * Get value of field APCTYP as a String.
	 */
	public String getAPCTYP() {
		return fieldAPCTYP.getString();
	}

	/**
	 * Get value of field APCUPY as a String.
	 */
	public String getAPCUPY() {
		return fieldAPCUPY.getString();
	}

	/**
	 * Get value of field APCUSR as a String.
	 */
	public String getAPCUSR() {
		return fieldAPCUSR.getString();
	}

	/**
	 * Return value of numeric field APCACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCACC() {
		return fieldAPCACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCAMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCAMT() {
		return fieldAPCAMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCHPN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCHPN() {
		return fieldAPCHPN.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCMPY as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCMPY() {
		return fieldAPCMPY.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCPHN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCPHN() {
		return fieldAPCPHN.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCRPY as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCRPY() {
		return fieldAPCRPY.getBigDecimal();
	}

	/**
	 * Return value of numeric field APCUPY as a BigDecimal.
	 */
	public BigDecimal getBigDecimalAPCUPY() {
		return fieldAPCUPY.getBigDecimal();
	}

	/**
	 * Set field APCACC using a String value.
	 */
	public void setAPCACC(String newvalue) {
		fieldAPCACC.setString(newvalue);
	}

	/**
	 * Set numeric field APCACC using a BigDecimal value.
	 */
	public void setAPCACC(BigDecimal newvalue) {
		fieldAPCACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCAMT using a String value.
	 */
	public void setAPCAMT(String newvalue) {
		fieldAPCAMT.setString(newvalue);
	}

	/**
	 * Set numeric field APCAMT using a BigDecimal value.
	 */
	public void setAPCAMT(BigDecimal newvalue) {
		fieldAPCAMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCHPN using a String value.
	 */
	public void setAPCHPN(String newvalue) {
		fieldAPCHPN.setString(newvalue);
	}

	/**
	 * Set numeric field APCHPN using a BigDecimal value.
	 */
	public void setAPCHPN(BigDecimal newvalue) {
		fieldAPCHPN.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCMPY using a String value.
	 */
	public void setAPCMPY(String newvalue) {
		fieldAPCMPY.setString(newvalue);
	}

	/**
	 * Set numeric field APCMPY using a BigDecimal value.
	 */
	public void setAPCMPY(BigDecimal newvalue) {
		fieldAPCMPY.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCPHN using a String value.
	 */
	public void setAPCPHN(String newvalue) {
		fieldAPCPHN.setString(newvalue);
	}

	/**
	 * Set numeric field APCPHN using a BigDecimal value.
	 */
	public void setAPCPHN(BigDecimal newvalue) {
		fieldAPCPHN.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCRPY using a String value.
	 */
	public void setAPCRPY(String newvalue) {
		fieldAPCRPY.setString(newvalue);
	}

	/**
	 * Set numeric field APCRPY using a BigDecimal value.
	 */
	public void setAPCRPY(BigDecimal newvalue) {
		fieldAPCRPY.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCSP2 using a String value.
	 */
	public void setAPCSP2(String newvalue) {
		fieldAPCSP2.setString(newvalue);
	}

	/**
	 * Set field APCSP3 using a String value.
	 */
	public void setAPCSP3(String newvalue) {
		fieldAPCSP3.setString(newvalue);
	}

	/**
	 * Set field APCSPI using a String value.
	 */
	public void setAPCSPI(String newvalue) {
		fieldAPCSPI.setString(newvalue);
	}

	/**
	 * Set field APCTYP using a String value.
	 */
	public void setAPCTYP(String newvalue) {
		fieldAPCTYP.setString(newvalue);
	}

	/**
	 * Set field APCUPY using a String value.
	 */
	public void setAPCUPY(String newvalue) {
		fieldAPCUPY.setString(newvalue);
	}

	/**
	 * Set numeric field APCUPY using a BigDecimal value.
	 */
	public void setAPCUPY(BigDecimal newvalue) {
		fieldAPCUPY.setBigDecimal(newvalue);
	}

	/**
	 * Set field APCUSR using a String value.
	 */
	public void setAPCUSR(String newvalue) {
		fieldAPCUSR.setString(newvalue);
	}
}