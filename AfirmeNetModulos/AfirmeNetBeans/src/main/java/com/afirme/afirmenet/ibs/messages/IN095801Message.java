package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN095801 physical file
 * definition.
 * 
 * File level identifier is 1030818132155. Record format level identifier is
 * 38DB5D498FE74.
 */
@SuppressWarnings("rawtypes")
public class IN095801Message extends MessageRecord {
	final static String fldnames[] = { "INSOPE", "INSUSR", "INSBNK", "INSTIP",
			"INSCOM", "INSNAM", "INSDS1", "INSDS2", "INSREF", "INSACC",
			"INSVOU", "INSRTY", "INSMIN", "INSMAX", "INSHLP", "INSCTY",
			"INSCMI", "INSCMA", "INSCHL", "INSTAX", "INSUTI", "INSACT",
			"INSDTR", "INSSTS", "INSFRC", "INSREC" };
	final static String tnames[] = { "INSOPE", "INSUSR", "INSBNK", "INSTIP",
			"INSCOM", "INSNAM", "INSDS1", "INSDS2", "INSREF", "INSACC",
			"INSVOU", "INSRTY", "INSMIN", "INSMAX", "INSHLP", "INSCTY",
			"INSCMI", "INSCMA", "INSCHL", "INSTAX", "INSUTI", "INSACT",
			"INSDTR", "INSSTS", "INSFRC", "INSREC" };
	final static String fid = "1030818132155";
	final static String rid = "38DB5D498FE74";
	final static String fmtname = "IN095801";
	final int FIELDCOUNT = 26;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldINSOPE = null;
	private CharacterField fieldINSUSR = null;
	private CharacterField fieldINSBNK = null;
	private DecimalField fieldINSTIP = null;
	private DecimalField fieldINSCOM = null;
	private CharacterField fieldINSNAM = null;
	private CharacterField fieldINSDS1 = null;
	private CharacterField fieldINSDS2 = null;
	private DecimalField fieldINSREF = null;
	private CharacterField fieldINSACC = null;
	private DecimalField fieldINSVOU = null;
	private CharacterField fieldINSRTY = null;
	private DecimalField fieldINSMIN = null;
	private DecimalField fieldINSMAX = null;
	private CharacterField fieldINSHLP = null;
	private CharacterField fieldINSCTY = null;
	private DecimalField fieldINSCMI = null;
	private DecimalField fieldINSCMA = null;
	private CharacterField fieldINSCHL = null;
	private CharacterField fieldINSTAX = null;
	private CharacterField fieldINSUTI = null;
	private CharacterField fieldINSACT = null;
	private DecimalField fieldINSDTR = null;
	private CharacterField fieldINSSTS = null;
	private DecimalField fieldINSFRC = null;
	private DecimalField fieldINSREC = null;

	/**
	 * Constructor for IN095801Message.
	 */
	public IN095801Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 425;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldINSOPE = new CharacterField(message, HEADERSIZE + 0,
				1, "INSOPE");
		fields[1] = fieldINSUSR = new CharacterField(message, HEADERSIZE + 1,
				10, "INSUSR");
		fields[2] = fieldINSBNK = new CharacterField(message, HEADERSIZE + 11,
				2, "INSBNK");
		fields[3] = fieldINSTIP = new DecimalField(message, HEADERSIZE + 13, 3,
				0, "INSTIP");
		fields[4] = fieldINSCOM = new DecimalField(message, HEADERSIZE + 16, 4,
				0, "INSCOM");
		fields[5] = fieldINSNAM = new CharacterField(message, HEADERSIZE + 20,
				40, "INSNAM");
		fields[6] = fieldINSDS1 = new CharacterField(message, HEADERSIZE + 60,
				30, "INSDS1");
		fields[7] = fieldINSDS2 = new CharacterField(message, HEADERSIZE + 90,
				30, "INSDS2");
		fields[8] = fieldINSREF = new DecimalField(message, HEADERSIZE + 120,
				10, 0, "INSREF");
		fields[9] = fieldINSACC = new CharacterField(message, HEADERSIZE + 130,
				29, "INSACC");
		fields[10] = fieldINSVOU = new DecimalField(message, HEADERSIZE + 159,
				10, 0, "INSVOU");
		fields[11] = fieldINSRTY = new CharacterField(message,
				HEADERSIZE + 169, 1, "INSRTY");
		fields[12] = fieldINSMIN = new DecimalField(message, HEADERSIZE + 170,
				3, 0, "INSMIN");
		fields[13] = fieldINSMAX = new DecimalField(message, HEADERSIZE + 173,
				3, 0, "INSMAX");
		fields[14] = fieldINSHLP = new CharacterField(message,
				HEADERSIZE + 176, 100, "INSHLP");
		fields[15] = fieldINSCTY = new CharacterField(message,
				HEADERSIZE + 276, 1, "INSCTY");
		fields[16] = fieldINSCMI = new DecimalField(message, HEADERSIZE + 277,
				3, 0, "INSCMI");
		fields[17] = fieldINSCMA = new DecimalField(message, HEADERSIZE + 280,
				3, 0, "INSCMA");
		fields[18] = fieldINSCHL = new CharacterField(message,
				HEADERSIZE + 283, 100, "INSCHL");
		fields[19] = fieldINSTAX = new CharacterField(message,
				HEADERSIZE + 383, 1, "INSTAX");
		fields[20] = fieldINSUTI = new CharacterField(message,
				HEADERSIZE + 384, 17, "INSUTI");
		fields[21] = fieldINSACT = new CharacterField(message,
				HEADERSIZE + 401, 2, "INSACT");
		fields[22] = fieldINSDTR = new DecimalField(message, HEADERSIZE + 403,
				5, 0, "INSDTR");
		fields[23] = fieldINSSTS = new CharacterField(message,
				HEADERSIZE + 408, 1, "INSSTS");
		fields[24] = fieldINSFRC = new DecimalField(message, HEADERSIZE + 409,
				8, 0, "INSFRC");
		fields[25] = fieldINSREC = new DecimalField(message, HEADERSIZE + 417,
				8, 0, "INSREC");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field INSOPE using a String value.
	 */
	public void setINSOPE(String newvalue) {
		fieldINSOPE.setString(newvalue);
	}

	/**
	 * Get value of field INSOPE as a String.
	 */
	public String getINSOPE() {
		return fieldINSOPE.getString();
	}

	/**
	 * Set field INSUSR using a String value.
	 */
	public void setINSUSR(String newvalue) {
		fieldINSUSR.setString(newvalue);
	}

	/**
	 * Get value of field INSUSR as a String.
	 */
	public String getINSUSR() {
		return fieldINSUSR.getString();
	}

	/**
	 * Set field INSBNK using a String value.
	 */
	public void setINSBNK(String newvalue) {
		fieldINSBNK.setString(newvalue);
	}

	/**
	 * Get value of field INSBNK as a String.
	 */
	public String getINSBNK() {
		return fieldINSBNK.getString();
	}

	/**
	 * Set field INSTIP using a String value.
	 */
	public void setINSTIP(String newvalue) {
		fieldINSTIP.setString(newvalue);
	}

	/**
	 * Get value of field INSTIP as a String.
	 */
	public String getINSTIP() {
		return fieldINSTIP.getString();
	}

	/**
	 * Set numeric field INSTIP using a BigDecimal value.
	 */
	public void setINSTIP(BigDecimal newvalue) {
		fieldINSTIP.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSTIP as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSTIP() {
		return fieldINSTIP.getBigDecimal();
	}

	/**
	 * Set field INSCOM using a String value.
	 */
	public void setINSCOM(String newvalue) {
		fieldINSCOM.setString(newvalue);
	}

	/**
	 * Get value of field INSCOM as a String.
	 */
	public String getINSCOM() {
		return fieldINSCOM.getString();
	}

	/**
	 * Set numeric field INSCOM using a BigDecimal value.
	 */
	public void setINSCOM(BigDecimal newvalue) {
		fieldINSCOM.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSCOM as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSCOM() {
		return fieldINSCOM.getBigDecimal();
	}

	/**
	 * Set field INSNAM using a String value.
	 */
	public void setINSNAM(String newvalue) {
		fieldINSNAM.setString(newvalue);
	}

	/**
	 * Get value of field INSNAM as a String.
	 */
	public String getINSNAM() {
		return fieldINSNAM.getString();
	}

	/**
	 * Set field INSDS1 using a String value.
	 */
	public void setINSDS1(String newvalue) {
		fieldINSDS1.setString(newvalue);
	}

	/**
	 * Get value of field INSDS1 as a String.
	 */
	public String getINSDS1() {
		return fieldINSDS1.getString();
	}

	/**
	 * Set field INSDS2 using a String value.
	 */
	public void setINSDS2(String newvalue) {
		fieldINSDS2.setString(newvalue);
	}

	/**
	 * Get value of field INSDS2 as a String.
	 */
	public String getINSDS2() {
		return fieldINSDS2.getString();
	}

	/**
	 * Set field INSREF using a String value.
	 */
	public void setINSREF(String newvalue) {
		fieldINSREF.setString(newvalue);
	}

	/**
	 * Get value of field INSREF as a String.
	 */
	public String getINSREF() {
		return fieldINSREF.getString();
	}

	/**
	 * Set numeric field INSREF using a BigDecimal value.
	 */
	public void setINSREF(BigDecimal newvalue) {
		fieldINSREF.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSREF as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSREF() {
		return fieldINSREF.getBigDecimal();
	}

	/**
	 * Set field INSACC using a String value.
	 */
	public void setINSACC(String newvalue) {
		fieldINSACC.setString(newvalue);
	}

	/**
	 * Get value of field INSACC as a String.
	 */
	public String getINSACC() {
		return fieldINSACC.getString();
	}

	/**
	 * Set field INSVOU using a String value.
	 */
	public void setINSVOU(String newvalue) {
		fieldINSVOU.setString(newvalue);
	}

	/**
	 * Get value of field INSVOU as a String.
	 */
	public String getINSVOU() {
		return fieldINSVOU.getString();
	}

	/**
	 * Set numeric field INSVOU using a BigDecimal value.
	 */
	public void setINSVOU(BigDecimal newvalue) {
		fieldINSVOU.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSVOU as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSVOU() {
		return fieldINSVOU.getBigDecimal();
	}

	/**
	 * Set field INSRTY using a String value.
	 */
	public void setINSRTY(String newvalue) {
		fieldINSRTY.setString(newvalue);
	}

	/**
	 * Get value of field INSRTY as a String.
	 */
	public String getINSRTY() {
		return fieldINSRTY.getString();
	}

	/**
	 * Set field INSMIN using a String value.
	 */
	public void setINSMIN(String newvalue) {
		fieldINSMIN.setString(newvalue);
	}

	/**
	 * Get value of field INSMIN as a String.
	 */
	public String getINSMIN() {
		return fieldINSMIN.getString();
	}

	/**
	 * Set numeric field INSMIN using a BigDecimal value.
	 */
	public void setINSMIN(BigDecimal newvalue) {
		fieldINSMIN.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSMIN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSMIN() {
		return fieldINSMIN.getBigDecimal();
	}

	/**
	 * Set field INSMAX using a String value.
	 */
	public void setINSMAX(String newvalue) {
		fieldINSMAX.setString(newvalue);
	}

	/**
	 * Get value of field INSMAX as a String.
	 */
	public String getINSMAX() {
		return fieldINSMAX.getString();
	}

	/**
	 * Set numeric field INSMAX using a BigDecimal value.
	 */
	public void setINSMAX(BigDecimal newvalue) {
		fieldINSMAX.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSMAX as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSMAX() {
		return fieldINSMAX.getBigDecimal();
	}

	/**
	 * Set field INSHLP using a String value.
	 */
	public void setINSHLP(String newvalue) {
		fieldINSHLP.setString(newvalue);
	}

	/**
	 * Get value of field INSHLP as a String.
	 */
	public String getINSHLP() {
		return fieldINSHLP.getString();
	}

	/**
	 * Set field INSCTY using a String value.
	 */
	public void setINSCTY(String newvalue) {
		fieldINSCTY.setString(newvalue);
	}

	/**
	 * Get value of field INSCTY as a String.
	 */
	public String getINSCTY() {
		return fieldINSCTY.getString();
	}

	/**
	 * Set field INSCMI using a String value.
	 */
	public void setINSCMI(String newvalue) {
		fieldINSCMI.setString(newvalue);
	}

	/**
	 * Get value of field INSCMI as a String.
	 */
	public String getINSCMI() {
		return fieldINSCMI.getString();
	}

	/**
	 * Set numeric field INSCMI using a BigDecimal value.
	 */
	public void setINSCMI(BigDecimal newvalue) {
		fieldINSCMI.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSCMI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSCMI() {
		return fieldINSCMI.getBigDecimal();
	}

	/**
	 * Set field INSCMA using a String value.
	 */
	public void setINSCMA(String newvalue) {
		fieldINSCMA.setString(newvalue);
	}

	/**
	 * Get value of field INSCMA as a String.
	 */
	public String getINSCMA() {
		return fieldINSCMA.getString();
	}

	/**
	 * Set numeric field INSCMA using a BigDecimal value.
	 */
	public void setINSCMA(BigDecimal newvalue) {
		fieldINSCMA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSCMA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSCMA() {
		return fieldINSCMA.getBigDecimal();
	}

	/**
	 * Set field INSCHL using a String value.
	 */
	public void setINSCHL(String newvalue) {
		fieldINSCHL.setString(newvalue);
	}

	/**
	 * Get value of field INSCHL as a String.
	 */
	public String getINSCHL() {
		return fieldINSCHL.getString();
	}

	/**
	 * Set field INSTAX using a String value.
	 */
	public void setINSTAX(String newvalue) {
		fieldINSTAX.setString(newvalue);
	}

	/**
	 * Get value of field INSTAX as a String.
	 */
	public String getINSTAX() {
		return fieldINSTAX.getString();
	}

	/**
	 * Set field INSUTI using a String value.
	 */
	public void setINSUTI(String newvalue) {
		fieldINSUTI.setString(newvalue);
	}

	/**
	 * Get value of field INSUTI as a String.
	 */
	public String getINSUTI() {
		return fieldINSUTI.getString();
	}

	/**
	 * Set field INSACT using a String value.
	 */
	public void setINSACT(String newvalue) {
		fieldINSACT.setString(newvalue);
	}

	/**
	 * Get value of field INSACT as a String.
	 */
	public String getINSACT() {
		return fieldINSACT.getString();
	}

	/**
	 * Set field INSDTR using a String value.
	 */
	public void setINSDTR(String newvalue) {
		fieldINSDTR.setString(newvalue);
	}

	/**
	 * Get value of field INSDTR as a String.
	 */
	public String getINSDTR() {
		return fieldINSDTR.getString();
	}

	/**
	 * Set numeric field INSDTR using a BigDecimal value.
	 */
	public void setINSDTR(BigDecimal newvalue) {
		fieldINSDTR.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSDTR as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSDTR() {
		return fieldINSDTR.getBigDecimal();
	}

	/**
	 * Set field INSSTS using a String value.
	 */
	public void setINSSTS(String newvalue) {
		fieldINSSTS.setString(newvalue);
	}

	/**
	 * Get value of field INSSTS as a String.
	 */
	public String getINSSTS() {
		return fieldINSSTS.getString();
	}

	/**
	 * Set field INSFRC using a String value.
	 */
	public void setINSFRC(String newvalue) {
		fieldINSFRC.setString(newvalue);
	}

	/**
	 * Get value of field INSFRC as a String.
	 */
	public String getINSFRC() {
		return fieldINSFRC.getString();
	}

	/**
	 * Set numeric field INSFRC using a BigDecimal value.
	 */
	public void setINSFRC(BigDecimal newvalue) {
		fieldINSFRC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSFRC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSFRC() {
		return fieldINSFRC.getBigDecimal();
	}

	/**
	 * Set field INSREC using a String value.
	 */
	public void setINSREC(String newvalue) {
		fieldINSREC.setString(newvalue);
	}

	/**
	 * Get value of field INSREC as a String.
	 */
	public String getINSREC() {
		return fieldINSREC.getString();
	}

	/**
	 * Set numeric field INSREC using a BigDecimal value.
	 */
	public void setINSREC(BigDecimal newvalue) {
		fieldINSREC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSREC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSREC() {
		return fieldINSREC.getBigDecimal();
	}

}
