package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INSTATIST physical file
 * definition.
 * 
 * File level identifier is 1000803162854. Record format level identifier is
 * 4FC1218A48B3C.
 */

public class INSTATISTMessage extends MessageRecord {
	final int FIELDCOUNT = 11;
	private CharacterField fieldINSUSR = null;
	private DecimalField fieldINSADT = null;
	private DecimalField fieldINSTMI = null;
	private DecimalField fieldINSACC = null;
	private DecimalField fieldINSCUN = null;
	private CharacterField fieldINSATY = null;
	private CharacterField fieldINSACT = null;
	private CharacterField fieldINSCCY = null;
	private DecimalField fieldINSAMT = null;
	private CharacterField fieldINSPGM = null;
	private CharacterField fieldINSFMT = null;

	/**
	 * Constructor for INSTATISTMessage.
	 */
	public INSTATISTMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 95;
		fileid = "1000803162854";
		recordid = "4FC1218A48B3C";
		message = new byte[getByteLength()];
		formatname = "INSTATIST";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "INSUSR";
		tagnames[0] = "INSUSR";
		fields[0] = fieldINSUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "INSUSR");
		fieldnames[1] = "INSADT";
		tagnames[1] = "INSADT";
		fields[1] = fieldINSADT = new DecimalField(message, HEADERSIZE + 10, 9,
				0, "INSADT");
		fieldnames[2] = "INSTMI";
		tagnames[2] = "INSTMI";
		fields[2] = fieldINSTMI = new DecimalField(message, HEADERSIZE + 19, 7,
				0, "INSTMI");
		fieldnames[3] = "INSACC";
		tagnames[3] = "INSACC";
		fields[3] = fieldINSACC = new DecimalField(message, HEADERSIZE + 26,
				13, 0, "INSACC");
		fieldnames[4] = "INSCUN";
		tagnames[4] = "INSCUN";
		fields[4] = fieldINSCUN = new DecimalField(message, HEADERSIZE + 39,
				10, 0, "INSCUN");
		fieldnames[5] = "INSATY";
		tagnames[5] = "INSATY";
		fields[5] = fieldINSATY = new CharacterField(message, HEADERSIZE + 49,
				4, "INSATY");
		fieldnames[6] = "INSACT";
		tagnames[6] = "INSACT";
		fields[6] = fieldINSACT = new CharacterField(message, HEADERSIZE + 53,
				2, "INSACT");
		fieldnames[7] = "INSCCY";
		tagnames[7] = "INSCCY";
		fields[7] = fieldINSCCY = new CharacterField(message, HEADERSIZE + 55,
				3, "INSCCY");
		fieldnames[8] = "INSAMT";
		tagnames[8] = "INSAMT";
		fields[8] = fieldINSAMT = new DecimalField(message, HEADERSIZE + 58,
				17, 2, "INSAMT");
		fieldnames[9] = "INSPGM";
		tagnames[9] = "INSPGM";
		fields[9] = fieldINSPGM = new CharacterField(message, HEADERSIZE + 75,
				10, "INSPGM");
		fieldnames[10] = "INSFMT";
		tagnames[10] = "INSFMT";
		fields[10] = fieldINSFMT = new CharacterField(message, HEADERSIZE + 85,
				10, "INSFMT");
	}

	/**
	 * Return value of numeric field INSACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSACC() {
		return fieldINSACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field INSADT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSADT() {
		return fieldINSADT.getBigDecimal();
	}

	/**
	 * Return value of numeric field INSAMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSAMT() {
		return fieldINSAMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field INSCUN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSCUN() {
		return fieldINSCUN.getBigDecimal();
	}

	/**
	 * Return value of numeric field INSTMI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSTMI() {
		return fieldINSTMI.getBigDecimal();
	}

	/**
	 * Get value of field INSACC as a String.
	 */
	public String getINSACC() {
		return fieldINSACC.getString();
	}

	/**
	 * Get value of field INSACT as a String.
	 */
	public String getINSACT() {
		return fieldINSACT.getString();
	}

	/**
	 * Get value of field INSADT as a String.
	 */
	public String getINSADT() {
		return fieldINSADT.getString();
	}

	/**
	 * Get value of field INSAMT as a String.
	 */
	public String getINSAMT() {
		return fieldINSAMT.getString();
	}

	/**
	 * Get value of field INSATY as a String.
	 */
	public String getINSATY() {
		return fieldINSATY.getString();
	}

	/**
	 * Get value of field INSCCY as a String.
	 */
	public String getINSCCY() {
		return fieldINSCCY.getString();
	}

	/**
	 * Get value of field INSCUN as a String.
	 */
	public String getINSCUN() {
		return fieldINSCUN.getString();
	}

	/**
	 * Get value of field INSFMT as a String.
	 */
	public String getINSFMT() {
		return fieldINSFMT.getString();
	}

	/**
	 * Get value of field INSPGM as a String.
	 */
	public String getINSPGM() {
		return fieldINSPGM.getString();
	}

	/**
	 * Get value of field INSTMI as a String.
	 */
	public String getINSTMI() {
		return fieldINSTMI.getString();
	}

	/**
	 * Get value of field INSUSR as a String.
	 */
	public String getINSUSR() {
		return fieldINSUSR.getString();
	}

	/**
	 * Set field INSACC using a String value.
	 */
	public void setINSACC(String newvalue) {
		fieldINSACC.setString(newvalue);
	}

	/**
	 * Set numeric field INSACC using a BigDecimal value.
	 */
	public void setINSACC(BigDecimal newvalue) {
		fieldINSACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field INSACT using a String value.
	 */
	public void setINSACT(String newvalue) {
		fieldINSACT.setString(newvalue);
	}

	/**
	 * Set field INSADT using a String value.
	 */
	public void setINSADT(String newvalue) {
		fieldINSADT.setString(newvalue);
	}

	/**
	 * Set numeric field INSADT using a BigDecimal value.
	 */
	public void setINSADT(BigDecimal newvalue) {
		fieldINSADT.setBigDecimal(newvalue);
	}

	/**
	 * Set field INSAMT using a String value.
	 */
	public void setINSAMT(String newvalue) {
		fieldINSAMT.setString(newvalue);
	}

	/**
	 * Set numeric field INSAMT using a BigDecimal value.
	 */
	public void setINSAMT(BigDecimal newvalue) {
		fieldINSAMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field INSATY using a String value.
	 */
	public void setINSATY(String newvalue) {
		fieldINSATY.setString(newvalue);
	}

	/**
	 * Set field INSCCY using a String value.
	 */
	public void setINSCCY(String newvalue) {
		fieldINSCCY.setString(newvalue);
	}

	/**
	 * Set field INSCUN using a String value.
	 */
	public void setINSCUN(String newvalue) {
		fieldINSCUN.setString(newvalue);
	}

	/**
	 * Set numeric field INSCUN using a BigDecimal value.
	 */
	public void setINSCUN(BigDecimal newvalue) {
		fieldINSCUN.setBigDecimal(newvalue);
	}

	/**
	 * Set field INSFMT using a String value.
	 */
	public void setINSFMT(String newvalue) {
		fieldINSFMT.setString(newvalue);
	}

	/**
	 * Set field INSPGM using a String value.
	 */
	public void setINSPGM(String newvalue) {
		fieldINSPGM.setString(newvalue);
	}

	/**
	 * Set field INSTMI using a String value.
	 */
	public void setINSTMI(String newvalue) {
		fieldINSTMI.setString(newvalue);
	}

	/**
	 * Set numeric field INSTMI using a BigDecimal value.
	 */
	public void setINSTMI(BigDecimal newvalue) {
		fieldINSTMI.setBigDecimal(newvalue);
	}

	/**
	 * Set field INSUSR using a String value.
	 */
	public void setINSUSR(String newvalue) {
		fieldINSUSR.setString(newvalue);
	}
}