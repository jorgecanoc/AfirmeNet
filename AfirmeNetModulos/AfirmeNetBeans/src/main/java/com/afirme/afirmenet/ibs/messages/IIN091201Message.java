package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IIN091201 physical file
 * definition.
 * 
 * File level identifier is 1011024175955. Record format level identifier is
 * 4C911DA05456D.
 */

public class IIN091201Message extends MessageRecord {
	final int FIELDCOUNT = 5;
	private CharacterField fieldIN912USR = null;
	private DecimalField fieldIN912CUN = null;
	private DecimalField fieldIN912BDAY = null;
	private CharacterField fieldIN912INDN = null;
	private CharacterField fieldIN912PWD = null;

	/**
	 * Constructor for IIN091201Message.
	 */
	public IIN091201Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 54;
		fileid = "1011024175955";
		recordid = "4C911DA05456D";
		message = new byte[getByteLength()];
		formatname = "IIN091201";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "IN912USR";
		tagnames[0] = "IN912USR";
		fields[0] = fieldIN912USR = new CharacterField(message, HEADERSIZE + 0,
				10, "IN912USR");
		fieldnames[1] = "IN912CUN";
		tagnames[1] = "IN912CUN";
		fields[1] = fieldIN912CUN = new DecimalField(message, HEADERSIZE + 10,
				10, 0, "IN912CUN");
		fieldnames[2] = "IN912BDAY";
		tagnames[2] = "IN912BDAY";
		fields[2] = fieldIN912BDAY = new DecimalField(message, HEADERSIZE + 20,
				9, 0, "IN912BDAY");
		fieldnames[3] = "IN912INDN";
		tagnames[3] = "IN912INDN";
		fields[3] = fieldIN912INDN = new CharacterField(message,
				HEADERSIZE + 29, 15, "IN912INDN");
		fieldnames[4] = "IN912PWD";
		tagnames[4] = "IN912PWD";
		fields[4] = fieldIN912PWD = new CharacterField(message,
				HEADERSIZE + 44, 10, "IN912PWD");
	}

	/**
	 * Set field IN912USR using a String value.
	 */
	public void setIN912USR(String newvalue) {
		fieldIN912USR.setString(newvalue);
	}

	/**
	 * Get value of field IN912USR as a String.
	 */
	public String getIN912USR() {
		return fieldIN912USR.getString();
	}

	/**
	 * Set field IN912CUN using a String value.
	 */
	public void setIN912CUN(String newvalue) {
		fieldIN912CUN.setString(newvalue);
	}

	/**
	 * Get value of field IN912CUN as a String.
	 */
	public String getIN912CUN() {
		return fieldIN912CUN.getString();
	}

	/**
	 * Set numeric field IN912CUN using a BigDecimal value.
	 */
	public void setIN912CUN(BigDecimal newvalue) {
		fieldIN912CUN.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN912CUN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN912CUN() {
		return fieldIN912CUN.getBigDecimal();
	}

	/**
	 * Set field IN912BDAY using a String value.
	 */
	public void setIN912BDAY(String newvalue) {
		fieldIN912BDAY.setString(newvalue);
	}

	/**
	 * Get value of field IN912BDAY as a String.
	 */
	public String getIN912BDAY() {
		return fieldIN912BDAY.getString();
	}

	/**
	 * Set numeric field IN912BDAY using a BigDecimal value.
	 */
	public void setIN912BDAY(BigDecimal newvalue) {
		fieldIN912BDAY.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN912BDAY as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN912BDAY() {
		return fieldIN912BDAY.getBigDecimal();
	}

	/**
	 * Set field IN912INDN using a String value.
	 */
	public void setIN912INDN(String newvalue) {
		fieldIN912INDN.setString(newvalue);
	}

	/**
	 * Get value of field IN912INDN as a String.
	 */
	public String getIN912INDN() {
		return fieldIN912INDN.getString();
	}

	/**
	 * Set field IN912PWD using a String value.
	 */
	public void setIN912PWD(String newvalue) {
		fieldIN912PWD.setString(newvalue);
	}

	/**
	 * Get value of field IN912PWD as a String.
	 */
	public String getIN912PWD() {
		return fieldIN912PWD.getString();
	}

}