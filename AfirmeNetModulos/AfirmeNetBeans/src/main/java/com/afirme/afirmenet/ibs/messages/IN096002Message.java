package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN096002 physical file
 * definition.
 * 
 * File level identifier is 1030804122843. Record format level identifier is
 * 39C7F807A00EF.
 */
@SuppressWarnings("rawtypes")
public class IN096002Message extends MessageRecord {
	final static String fldnames[] = { "IN02USER", "IN02TARJ", "IN02CHGTYP",
			"IN02STAT", "IN02LDAT", "IN02LMAT", "IN02LDPO", "IN02LMPO",
			"IN02LDVE", "IN02LMVE" };
	final static String tnames[] = { "IN02USER", "IN02TARJ", "IN02CHGTYP",
			"IN02STAT", "IN02LDAT", "IN02LMAT", "IN02LDPO", "IN02LMPO",
			"IN02LDVE", "IN02LMVE" };
	final static String fid = "1030804122843";
	final static String rid = "39C7F807A00EF";
	final static String fmtname = "IN096002";
	final int FIELDCOUNT = 10;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldIN02USER = null;
	private DecimalField fieldIN02TARJ = null;
	private CharacterField fieldIN02CHGTYP = null;
	private CharacterField fieldIN02STAT = null;
	private DecimalField fieldIN02LDAT = null;
	private DecimalField fieldIN02LMAT = null;
	private DecimalField fieldIN02LDPO = null;
	private DecimalField fieldIN02LMPO = null;
	private DecimalField fieldIN02LDVE = null;
	private DecimalField fieldIN02LMVE = null;

	/**
	 * Constructor for IN096002Message.
	 */
	public IN096002Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 119;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldIN02USER = new CharacterField(message, HEADERSIZE + 0,
				10, "IN02USER");
		fields[1] = fieldIN02TARJ = new DecimalField(message, HEADERSIZE + 10,
				17, 0, "IN02TARJ");
		fields[2] = fieldIN02CHGTYP = new CharacterField(message,
				HEADERSIZE + 27, 1, "IN02CHGTYP");
		fields[3] = fieldIN02STAT = new CharacterField(message,
				HEADERSIZE + 28, 1, "IN02STAT");
		fields[4] = fieldIN02LDAT = new DecimalField(message, HEADERSIZE + 29,
				15, 2, "IN02LDAT");
		fields[5] = fieldIN02LMAT = new DecimalField(message, HEADERSIZE + 44,
				15, 2, "IN02LMAT");
		fields[6] = fieldIN02LDPO = new DecimalField(message, HEADERSIZE + 59,
				15, 2, "IN02LDPO");
		fields[7] = fieldIN02LMPO = new DecimalField(message, HEADERSIZE + 74,
				15, 2, "IN02LMPO");
		fields[8] = fieldIN02LDVE = new DecimalField(message, HEADERSIZE + 89,
				15, 2, "IN02LDVE");
		fields[9] = fieldIN02LMVE = new DecimalField(message, HEADERSIZE + 104,
				15, 2, "IN02LMVE");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field IN02USER using a String value.
	 */
	public void setIN02USER(String newvalue) {
		fieldIN02USER.setString(newvalue);
	}

	/**
	 * Get value of field IN02USER as a String.
	 */
	public String getIN02USER() {
		return fieldIN02USER.getString();
	}

	/**
	 * Set field IN02TARJ using a String value.
	 */
	public void setIN02TARJ(String newvalue) {
		fieldIN02TARJ.setString(newvalue);
	}

	/**
	 * Get value of field IN02TARJ as a String.
	 */
	public String getIN02TARJ() {
		return fieldIN02TARJ.getString();
	}

	/**
	 * Set numeric field IN02TARJ using a BigDecimal value.
	 */
	public void setIN02TARJ(BigDecimal newvalue) {
		fieldIN02TARJ.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02TARJ as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02TARJ() {
		return fieldIN02TARJ.getBigDecimal();
	}

	/**
	 * Set field IN02CHGTYP using a String value.
	 */
	public void setIN02CHGTYP(String newvalue) {
		fieldIN02CHGTYP.setString(newvalue);
	}

	/**
	 * Get value of field IN02CHGTYP as a String.
	 */
	public String getIN02CHGTYP() {
		return fieldIN02CHGTYP.getString();
	}

	/**
	 * Set field IN02STAT using a String value.
	 */
	public void setIN02STAT(String newvalue) {
		fieldIN02STAT.setString(newvalue);
	}

	/**
	 * Get value of field IN02STAT as a String.
	 */
	public String getIN02STAT() {
		return fieldIN02STAT.getString();
	}

	/**
	 * Set field IN02LDAT using a String value.
	 */
	public void setIN02LDAT(String newvalue) {
		fieldIN02LDAT.setString(newvalue);
	}

	/**
	 * Get value of field IN02LDAT as a String.
	 */
	public String getIN02LDAT() {
		return fieldIN02LDAT.getString();
	}

	/**
	 * Set numeric field IN02LDAT using a BigDecimal value.
	 */
	public void setIN02LDAT(BigDecimal newvalue) {
		fieldIN02LDAT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LDAT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LDAT() {
		return fieldIN02LDAT.getBigDecimal();
	}

	/**
	 * Set field IN02LMAT using a String value.
	 */
	public void setIN02LMAT(String newvalue) {
		fieldIN02LMAT.setString(newvalue);
	}

	/**
	 * Get value of field IN02LMAT as a String.
	 */
	public String getIN02LMAT() {
		return fieldIN02LMAT.getString();
	}

	/**
	 * Set numeric field IN02LMAT using a BigDecimal value.
	 */
	public void setIN02LMAT(BigDecimal newvalue) {
		fieldIN02LMAT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LMAT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LMAT() {
		return fieldIN02LMAT.getBigDecimal();
	}

	/**
	 * Set field IN02LDPO using a String value.
	 */
	public void setIN02LDPO(String newvalue) {
		fieldIN02LDPO.setString(newvalue);
	}

	/**
	 * Get value of field IN02LDPO as a String.
	 */
	public String getIN02LDPO() {
		return fieldIN02LDPO.getString();
	}

	/**
	 * Set numeric field IN02LDPO using a BigDecimal value.
	 */
	public void setIN02LDPO(BigDecimal newvalue) {
		fieldIN02LDPO.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LDPO as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LDPO() {
		return fieldIN02LDPO.getBigDecimal();
	}

	/**
	 * Set field IN02LMPO using a String value.
	 */
	public void setIN02LMPO(String newvalue) {
		fieldIN02LMPO.setString(newvalue);
	}

	/**
	 * Get value of field IN02LMPO as a String.
	 */
	public String getIN02LMPO() {
		return fieldIN02LMPO.getString();
	}

	/**
	 * Set numeric field IN02LMPO using a BigDecimal value.
	 */
	public void setIN02LMPO(BigDecimal newvalue) {
		fieldIN02LMPO.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LMPO as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LMPO() {
		return fieldIN02LMPO.getBigDecimal();
	}

	/**
	 * Set field IN02LDVE using a String value.
	 */
	public void setIN02LDVE(String newvalue) {
		fieldIN02LDVE.setString(newvalue);
	}

	/**
	 * Get value of field IN02LDVE as a String.
	 */
	public String getIN02LDVE() {
		return fieldIN02LDVE.getString();
	}

	/**
	 * Set numeric field IN02LDVE using a BigDecimal value.
	 */
	public void setIN02LDVE(BigDecimal newvalue) {
		fieldIN02LDVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LDVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LDVE() {
		return fieldIN02LDVE.getBigDecimal();
	}

	/**
	 * Set field IN02LMVE using a String value.
	 */
	public void setIN02LMVE(String newvalue) {
		fieldIN02LMVE.setString(newvalue);
	}

	/**
	 * Get value of field IN02LMVE as a String.
	 */
	public String getIN02LMVE() {
		return fieldIN02LMVE.getString();
	}

	/**
	 * Set numeric field IN02LMVE using a BigDecimal value.
	 */
	public void setIN02LMVE(BigDecimal newvalue) {
		fieldIN02LMVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN02LMVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN02LMVE() {
		return fieldIN02LMVE.getBigDecimal();
	}

}
