package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INTRHDSJV physical file
 * definition.
 * 
 * File level identifier is 1000803162909. Record format level identifier is
 * 4969DB77DA746.
 */

public class INTRHDSJVMessage extends MessageRecord {
	final int FIELDCOUNT = 9;
	private CharacterField fieldINTUSR = null;
	private DecimalField fieldINTADT = null;
	private DecimalField fieldINTTMI = null;
	private DecimalField fieldINTACC = null;
	private DecimalField fieldINTCUN = null;
	private CharacterField fieldINTATY = null;
	private CharacterField fieldINTACT = null;
	private DecimalField fieldINTAMT = null;
	private CharacterField fieldINTCCY = null;

	/**
	 * Constructor for INTRHDSJVMessage.
	 */
	public INTRHDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 74;
		fileid = "1000803162909";
		recordid = "4969DB77DA746";
		message = new byte[getByteLength()];
		formatname = "INTRHDSJV";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "INTUSR";
		tagnames[0] = "INTUSR";
		fields[0] = fieldINTUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "INTUSR");
		fieldnames[1] = "INTADT";
		tagnames[1] = "INTADT";
		fields[1] = fieldINTADT = new DecimalField(message, HEADERSIZE + 10, 9,
				0, "INTADT");
		fieldnames[2] = "INTTMI";
		tagnames[2] = "INTTMI";
		fields[2] = fieldINTTMI = new DecimalField(message, HEADERSIZE + 19, 7,
				0, "INTTMI");
		fieldnames[3] = "INTACC";
		tagnames[3] = "INTACC";
		fields[3] = fieldINTACC = new DecimalField(message, HEADERSIZE + 26,
				13, 0, "INTACC");
		fieldnames[4] = "INTCUN";
		tagnames[4] = "INTCUN";
		fields[4] = fieldINTCUN = new DecimalField(message, HEADERSIZE + 39,
				10, 0, "INTCUN");
		fieldnames[5] = "INTATY";
		tagnames[5] = "INTATY";
		fields[5] = fieldINTATY = new CharacterField(message, HEADERSIZE + 49,
				3, "INTATY");
		fieldnames[6] = "INTACT";
		tagnames[6] = "INTACT";
		fields[6] = fieldINTACT = new CharacterField(message, HEADERSIZE + 52,
				2, "INTACT");
		fieldnames[7] = "INTAMT";
		tagnames[7] = "INTAMT";
		fields[7] = fieldINTAMT = new DecimalField(message, HEADERSIZE + 54,
				17, 2, "INTAMT");
		fieldnames[8] = "INTCCY";
		tagnames[8] = "INTCCY";
		fields[8] = fieldINTCCY = new CharacterField(message, HEADERSIZE + 71,
				3, "INTCCY");
	}

	/**
	 * Return value of numeric field INTACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTACC() {
		return fieldINTACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field INTADT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTADT() {
		return fieldINTADT.getBigDecimal();
	}

	/**
	 * Return value of numeric field INTAMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTAMT() {
		return fieldINTAMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field INTCUN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTCUN() {
		return fieldINTCUN.getBigDecimal();
	}

	/**
	 * Return value of numeric field INTTMI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTTMI() {
		return fieldINTTMI.getBigDecimal();
	}

	/**
	 * Get value of field INTACC as a String.
	 */
	public String getINTACC() {
		return fieldINTACC.getString();
	}

	/**
	 * Get value of field INTACT as a String.
	 */
	public String getINTACT() {
		return fieldINTACT.getString();
	}

	/**
	 * Get value of field INTADT as a String.
	 */
	public String getINTADT() {
		return fieldINTADT.getString();
	}

	/**
	 * Get value of field INTAMT as a String.
	 */
	public String getINTAMT() {
		return fieldINTAMT.getString();
	}

	/**
	 * Get value of field INTATY as a String.
	 */
	public String getINTATY() {
		return fieldINTATY.getString();
	}

	/**
	 * Get value of field INTCCY as a String.
	 */
	public String getINTCCY() {
		return fieldINTCCY.getString();
	}

	/**
	 * Get value of field INTCUN as a String.
	 */
	public String getINTCUN() {
		return fieldINTCUN.getString();
	}

	/**
	 * Get value of field INTTMI as a String.
	 */
	public String getINTTMI() {
		return fieldINTTMI.getString();
	}

	/**
	 * Get value of field INTUSR as a String.
	 */
	public String getINTUSR() {
		return fieldINTUSR.getString();
	}

	/**
	 * Set field INTACC using a String value.
	 */
	public void setINTACC(String newvalue) {
		fieldINTACC.setString(newvalue);
	}

	/**
	 * Set numeric field INTACC using a BigDecimal value.
	 */
	public void setINTACC(BigDecimal newvalue) {
		fieldINTACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field INTACT using a String value.
	 */
	public void setINTACT(String newvalue) {
		fieldINTACT.setString(newvalue);
	}

	/**
	 * Set field INTADT using a String value.
	 */
	public void setINTADT(String newvalue) {
		fieldINTADT.setString(newvalue);
	}

	/**
	 * Set numeric field INTADT using a BigDecimal value.
	 */
	public void setINTADT(BigDecimal newvalue) {
		fieldINTADT.setBigDecimal(newvalue);
	}

	/**
	 * Set field INTAMT using a String value.
	 */
	public void setINTAMT(String newvalue) {
		fieldINTAMT.setString(newvalue);
	}

	/**
	 * Set numeric field INTAMT using a BigDecimal value.
	 */
	public void setINTAMT(BigDecimal newvalue) {
		fieldINTAMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field INTATY using a String value.
	 */
	public void setINTATY(String newvalue) {
		fieldINTATY.setString(newvalue);
	}

	/**
	 * Set field INTCCY using a String value.
	 */
	public void setINTCCY(String newvalue) {
		fieldINTCCY.setString(newvalue);
	}

	/**
	 * Set field INTCUN using a String value.
	 */
	public void setINTCUN(String newvalue) {
		fieldINTCUN.setString(newvalue);
	}

	/**
	 * Set numeric field INTCUN using a BigDecimal value.
	 */
	public void setINTCUN(BigDecimal newvalue) {
		fieldINTCUN.setBigDecimal(newvalue);
	}

	/**
	 * Set field INTTMI using a String value.
	 */
	public void setINTTMI(String newvalue) {
		fieldINTTMI.setString(newvalue);
	}

	/**
	 * Set numeric field INTTMI using a BigDecimal value.
	 */
	public void setINTTMI(BigDecimal newvalue) {
		fieldINTTMI.setBigDecimal(newvalue);
	}

	/**
	 * Set field INTUSR using a String value.
	 */
	public void setINTUSR(String newvalue) {
		fieldINTUSR.setString(newvalue);
	}
}