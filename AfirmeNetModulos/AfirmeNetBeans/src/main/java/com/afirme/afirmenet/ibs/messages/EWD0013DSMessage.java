/**
 *  This Class was created By Luis Velando
 *  Copyright Datapro Inc. 1999
 **/

package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from EWD0013DS physical file
 * definition.
 * 
 * File level identifier is 1000310114505. Record format level identifier is
 * 371526E4F307E.
 */

public class EWD0013DSMessage extends MessageRecord {
	final int FIELDCOUNT = 5;
	private CharacterField fieldEWDSHR = null;
	private DecimalField fieldEWDBRN = null;
	private CharacterField fieldEWDNME = null;
	private CharacterField fieldEWDCIT = null;
	private CharacterField fieldEWDOPE = null;

	/**
	 * Constructor for EWD0013DSMessage.
	 */
	public EWD0013DSMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */

	protected void createFields() {
		recordsize = 77;
		fileid = "1000310114505";
		recordid = "371526E4F307E";
		message = new byte[getByteLength()];
		formatname = "EWD0013DS";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "EWDSHR";
		tagnames[0] = "EWDSHR";
		fields[0] = fieldEWDSHR = new CharacterField(message, HEADERSIZE + 0,
				2, "EWDSHR");
		fieldnames[1] = "EWDBRN";
		tagnames[1] = "EWDBRN";
		fields[1] = fieldEWDBRN = new DecimalField(message, HEADERSIZE + 2, 4,
				0, "EWDBRN");
		fieldnames[2] = "EWDNME";
		tagnames[2] = "EWDNME";
		fields[2] = fieldEWDNME = new CharacterField(message, HEADERSIZE + 6,
				35, "EWDNME");
		fieldnames[3] = "EWDCIT";
		tagnames[3] = "EWDCIT";
		fields[3] = fieldEWDCIT = new CharacterField(message, HEADERSIZE + 41,
				35, "EWDCIT");
		fieldnames[4] = "EWDOPE";
		tagnames[4] = "EWDOPE";
		fields[4] = fieldEWDOPE = new CharacterField(message, HEADERSIZE + 76,
				1, "EWDOPE");
	}

	/**
	 * Return value of numeric field EWDBRN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalEWDBRN() {
		return fieldEWDBRN.getBigDecimal();
	}

	/**
	 * Get value of field EWDBRN as a String.
	 */
	public String getEWDBRN() {
		return fieldEWDBRN.getString();
	}

	/**
	 * Get value of field EWDCIT as a String.
	 */
	public String getEWDCIT() {
		return fieldEWDCIT.getString();
	}

	/**
	 * Get value of field EWDNME as a String.
	 */
	public String getEWDNME() {
		return fieldEWDNME.getString();
	}

	/**
	 * Get value of field EWDOPE as a String.
	 */
	public String getEWDOPE() {
		return fieldEWDOPE.getString();
	}

	/**
	 * Get value of field EWDSHR as a String.
	 */
	public String getEWDSHR() {
		return fieldEWDSHR.getString();
	}

	/**
	 * Set field EWDBRN using a String value.
	 */
	public void setEWDBRN(String newvalue) {
		fieldEWDBRN.setString(newvalue);
	}

	/**
	 * Set numeric field EWDBRN using a BigDecimal value.
	 */
	public void setEWDBRN(BigDecimal newvalue) {
		fieldEWDBRN.setBigDecimal(newvalue);
	}

	/**
	 * Set field EWDCIT using a String value.
	 */
	public void setEWDCIT(String newvalue) {
		fieldEWDCIT.setString(newvalue);
	}

	/**
	 * Set field EWDNME using a String value.
	 */
	public void setEWDNME(String newvalue) {
		fieldEWDNME.setString(newvalue);
	}

	/**
	 * Set field EWDOPE using a String value.
	 */
	public void setEWDOPE(String newvalue) {
		fieldEWDOPE.setString(newvalue);
	}

	/**
	 * Set field EWDSHR using a String value.
	 */
	public void setEWDSHR(String newvalue) {
		fieldEWDSHR.setString(newvalue);
	}
}