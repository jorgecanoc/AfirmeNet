package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from NIKDSJV physical file
 * definition.
 * 
 * File level identifier is 1030729125045. Record format level identifier is
 * 3999608C727A6.
 */
@SuppressWarnings("rawtypes")
public class NIKDSJVMessage extends MessageRecord {
	final static String fldnames[] = { "NIKUSR", "NIKDSC", "NIKACC", "NIKCCN",
			"NIKNNM", "NIKTYP" };
	final static String tnames[] = { "NIKUSR", "NIKDSC", "NIKACC", "NIKCCN",
			"NIKNNM", "NIKTYP" };
	final static String fid = "1030729125045";
	final static String rid = "3999608C727A6";
	final static String fmtname = "NIKDSJV";
	final int FIELDCOUNT = 6;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldNIKUSR = null;
	private CharacterField fieldNIKDSC = null;
	private DecimalField fieldNIKACC = null;
	private DecimalField fieldNIKCCN = null;
	private CharacterField fieldNIKNNM = null;
	private CharacterField fieldNIKTYP = null;

	/**
	 * Constructor for NIKDSJVMessage.
	 */
	public NIKDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 103;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldNIKUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "NIKUSR");
		fields[1] = fieldNIKDSC = new CharacterField(message, HEADERSIZE + 10,
				30, "NIKDSC");
		fields[2] = fieldNIKACC = new DecimalField(message, HEADERSIZE + 40,
				13, 0, "NIKACC");
		fields[3] = fieldNIKCCN = new DecimalField(message, HEADERSIZE + 53,
				17, 0, "NIKCCN");
		fields[4] = fieldNIKNNM = new CharacterField(message, HEADERSIZE + 70,
				30, "NIKNNM");
		fields[5] = fieldNIKTYP = new CharacterField(message, HEADERSIZE + 100,
				3, "NIKTYP");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field NIKUSR using a String value.
	 */
	public void setNIKUSR(String newvalue) {
		fieldNIKUSR.setString(newvalue);
	}

	/**
	 * Get value of field NIKUSR as a String.
	 */
	public String getNIKUSR() {
		return fieldNIKUSR.getString();
	}

	/**
	 * Set field NIKDSC using a String value.
	 */
	public void setNIKDSC(String newvalue) {
		fieldNIKDSC.setString(newvalue);
	}

	/**
	 * Get value of field NIKDSC as a String.
	 */
	public String getNIKDSC() {
		return fieldNIKDSC.getString();
	}

	/**
	 * Set field NIKACC using a String value.
	 */
	public void setNIKACC(String newvalue) {
		fieldNIKACC.setString(newvalue);
	}

	/**
	 * Get value of field NIKACC as a String.
	 */
	public String getNIKACC() {
		return fieldNIKACC.getString();
	}

	/**
	 * Set numeric field NIKACC using a BigDecimal value.
	 */
	public void setNIKACC(BigDecimal newvalue) {
		fieldNIKACC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field NIKACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalNIKACC() {
		return fieldNIKACC.getBigDecimal();
	}

	/**
	 * Set field NIKCCN using a String value.
	 */
	public void setNIKCCN(String newvalue) {
		fieldNIKCCN.setString(newvalue);
	}

	/**
	 * Get value of field NIKCCN as a String.
	 */
	public String getNIKCCN() {
		return fieldNIKCCN.getString();
	}

	/**
	 * Set numeric field NIKCCN using a BigDecimal value.
	 */
	public void setNIKCCN(BigDecimal newvalue) {
		fieldNIKCCN.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field NIKCCN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalNIKCCN() {
		return fieldNIKCCN.getBigDecimal();
	}

	/**
	 * Set field NIKNNM using a String value.
	 */
	public void setNIKNNM(String newvalue) {
		fieldNIKNNM.setString(newvalue);
	}

	/**
	 * Get value of field NIKNNM as a String.
	 */
	public String getNIKNNM() {
		return fieldNIKNNM.getString();
	}

	/**
	 * Set field NIKTYP using a String value.
	 */
	public void setNIKTYP(String newvalue) {
		fieldNIKTYP.setString(newvalue);
	}

	/**
	 * Get value of field NIKTYP as a String.
	 */
	public String getNIKTYP() {
		return fieldNIKTYP.getString();
	}

}
