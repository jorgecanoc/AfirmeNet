package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN095502 physical file
 * definition.
 * 
 * File level identifier is 1000920164226. Record format level identifier is
 * 46F11762D5FBE.
 */

public class IN095502Message extends MessageRecord {
	final int FIELDCOUNT = 7;
	private CharacterField fieldIN9552USR = null;
	private DecimalField fieldIN955DAC = null;
	private CharacterField fieldIN955CCY = null;
	private DecimalField fieldIN955AMT = null;
	private CharacterField fieldIN9552TYP = null;
	private CharacterField fieldIN955SAC = null;
	private CharacterField fieldIN955VISA = null;

	/**
	 * Constructor for IN095502Message.
	 */
	public IN095502Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 77;
		fileid = "1000920164226";
		recordid = "46F11762D5FBE";
		message = new byte[getByteLength()];
		formatname = "IN095502";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "IN9552USR";
		tagnames[0] = "IN9552USR";
		fields[0] = fieldIN9552USR = new CharacterField(message,
				HEADERSIZE + 0, 10, "IN9552USR");
		fieldnames[1] = "IN955DAC";
		tagnames[1] = "IN955DAC";
		fields[1] = fieldIN955DAC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "IN955DAC");
		fieldnames[2] = "IN955CCY";
		tagnames[2] = "IN955CCY";
		fields[2] = fieldIN955CCY = new CharacterField(message,
				HEADERSIZE + 23, 3, "IN955CCY");
		fieldnames[3] = "IN955AMT";
		tagnames[3] = "IN955AMT";
		fields[3] = fieldIN955AMT = new DecimalField(message, HEADERSIZE + 26,
				15, 2, "IN955AMT");
		fieldnames[4] = "IN9552TYP";
		tagnames[4] = "IN9552TYP";
		fields[4] = fieldIN9552TYP = new CharacterField(message,
				HEADERSIZE + 41, 2, "IN9552TYP");
		fieldnames[5] = "IN955SAC";
		tagnames[5] = "IN955SAC";
		fields[5] = fieldIN955SAC = new CharacterField(message,
				HEADERSIZE + 43, 18, "IN955SAC");
		fieldnames[6] = "IN955VISA";
		tagnames[6] = "IN955VISA";
		fields[6] = fieldIN955VISA = new CharacterField(message,
				HEADERSIZE + 61, 16, "IN955VISA");
	}

	/**
	 * Return value of numeric field IN955AMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN955AMT() {
		return fieldIN955AMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field IN955DAC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN955DAC() {
		return fieldIN955DAC.getBigDecimal();
	}

	/**
	 * Get value of field IN9552TYP as a String.
	 */
	public String getIN9552TYP() {
		return fieldIN9552TYP.getString();
	}

	/**
	 * Get value of field IN9552USR as a String.
	 */
	public String getIN9552USR() {
		return fieldIN9552USR.getString();
	}

	/**
	 * Get value of field IN955AMT as a String.
	 */
	public String getIN955AMT() {
		return fieldIN955AMT.getString();
	}

	/**
	 * Get value of field IN955CCY as a String.
	 */
	public String getIN955CCY() {
		return fieldIN955CCY.getString();
	}

	/**
	 * Get value of field IN955DAC as a String.
	 */
	public String getIN955DAC() {
		return fieldIN955DAC.getString();
	}

	/**
	 * Get value of field IN955SAC as a String.
	 */
	public String getIN955SAC() {
		return fieldIN955SAC.getString();
	}

	/**
	 * Get value of field IN955VISA as a String.
	 */
	public String getIN955VISA() {
		return fieldIN955VISA.getString();
	}

	/**
	 * Set field IN9552TYP using a String value.
	 */
	public void setIN9552TYP(String newvalue) {
		fieldIN9552TYP.setString(newvalue);
	}

	/**
	 * Set field IN9552USR using a String value.
	 */
	public void setIN9552USR(String newvalue) {
		fieldIN9552USR.setString(newvalue);
	}

	/**
	 * Set field IN955AMT using a String value.
	 */
	public void setIN955AMT(String newvalue) {
		fieldIN955AMT.setString(newvalue);
	}

	/**
	 * Set numeric field IN955AMT using a BigDecimal value.
	 */
	public void setIN955AMT(BigDecimal newvalue) {
		fieldIN955AMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN955CCY using a String value.
	 */
	public void setIN955CCY(String newvalue) {
		fieldIN955CCY.setString(newvalue);
	}

	/**
	 * Set field IN955DAC using a String value.
	 */
	public void setIN955DAC(String newvalue) {
		fieldIN955DAC.setString(newvalue);
	}

	/**
	 * Set numeric field IN955DAC using a BigDecimal value.
	 */
	public void setIN955DAC(BigDecimal newvalue) {
		fieldIN955DAC.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN955SAC using a String value.
	 */
	public void setIN955SAC(String newvalue) {
		fieldIN955SAC.setString(newvalue);
	}

	/**
	 * Set field IN955VISA using a String value.
	 */
	public void setIN955VISA(String newvalue) {
		fieldIN955VISA.setString(newvalue);
	}
}