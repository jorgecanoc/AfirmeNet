package com.afirme.afirmenet.ibs.messages;

import com.datapro.sockets.*;
import java.math.*;

import java.util.*;

/**
 * Class generated by AS/400 CRTCLASS command from INTSY02PF physical file
 * definition.
 * 
 * File level identifier is 1141119175124. Record format level identifier is
 * 50C18E8833229.
 */
@SuppressWarnings("rawtypes")
public class INTSY02PFMessage extends MessageRecord {
	final static String fldnames[] = { "INNUTR", "INCONI", "INCLIE", "INUSRI",
			"INTPOP", "INTDCC", "INCVV1", "INFEVE", "INCTAA", "INIMDI",
			"INSLDI", "INLDER", "INAUDE", "INSADI", "INPOCO", "INFOAU",
			"INNATS", "INFETR", "INHOTR" };
	final static String tnames[] = { "INNUTR", "INCONI", "INCLIE", "INUSRI",
			"INTPOP", "INTDCC", "INCVV1", "INFEVE", "INCTAA", "INIMDI",
			"INSLDI", "INLDER", "INAUDE", "INSADI", "INPOCO", "INFOAU",
			"INNATS", "INFETR", "INHOTR" };
	final static String fid = "1141119175124";
	final static String rid = "50C18E8833229";
	final static String fmtname = "INTSY02PF";
	final int FIELDCOUNT = 19;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldINNUTR = null;
	private CharacterField fieldINCONI = null;
	private DecimalField fieldINCLIE = null;
	private CharacterField fieldINUSRI = null;
	private CharacterField fieldINTPOP = null;
	private DecimalField fieldINTDCC = null;
	private DecimalField fieldINCVV1 = null;
	private DecimalField fieldINFEVE = null;
	private DecimalField fieldINCTAA = null;
	private DecimalField fieldINIMDI = null;
	private DecimalField fieldINSLDI = null;
	private DecimalField fieldINLDER = null;
	private DecimalField fieldINAUDE = null;
	private DecimalField fieldINSADI = null;
	private DecimalField fieldINPOCO = null;
	private CharacterField fieldINFOAU = null;
	private CharacterField fieldINNATS = null;
	private DecimalField fieldINFETR = null;
	private DecimalField fieldINHOTR = null;

	/**
	 * Constructor for INTSY02PFMessage.
	 */
	public INTSY02PFMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 198;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldINNUTR = new CharacterField(message, HEADERSIZE + 0,
				2, "INNUTR");
		fields[1] = fieldINCONI = new CharacterField(message, HEADERSIZE + 2,
				10, "INCONI");
		fields[2] = fieldINCLIE = new DecimalField(message, HEADERSIZE + 12,
				10, 0, "INCLIE");
		fields[3] = fieldINUSRI = new CharacterField(message, HEADERSIZE + 22,
				10, "INUSRI");
		fields[4] = fieldINTPOP = new CharacterField(message, HEADERSIZE + 32,
				1, "INTPOP");
		fields[5] = fieldINTDCC = new DecimalField(message, HEADERSIZE + 33,
				17, 0, "INTDCC");
		fields[6] = fieldINCVV1 = new DecimalField(message, HEADERSIZE + 50, 4,
				0, "INCVV1");
		fields[7] = fieldINFEVE = new DecimalField(message, HEADERSIZE + 54, 5,
				0, "INFEVE");
		fields[8] = fieldINCTAA = new DecimalField(message, HEADERSIZE + 59,
				13, 0, "INCTAA");
		fields[9] = fieldINIMDI = new DecimalField(message, HEADERSIZE + 72,
				17, 2, "INIMDI");
		fields[10] = fieldINSLDI = new DecimalField(message, HEADERSIZE + 89,
				17, 2, "INSLDI");
		fields[11] = fieldINLDER = new DecimalField(message, HEADERSIZE + 106,
				17, 2, "INLDER");
		fields[12] = fieldINAUDE = new DecimalField(message, HEADERSIZE + 123,
				17, 2, "INAUDE");
		fields[13] = fieldINSADI = new DecimalField(message, HEADERSIZE + 140,
				17, 2, "INSADI");
		fields[14] = fieldINPOCO = new DecimalField(message, HEADERSIZE + 157,
				7, 2, "INPOCO");
		fields[15] = fieldINFOAU = new CharacterField(message,
				HEADERSIZE + 164, 12, "INFOAU");
		fields[16] = fieldINNATS = new CharacterField(message,
				HEADERSIZE + 176, 6, "INNATS");
		fields[17] = fieldINFETR = new DecimalField(message, HEADERSIZE + 182,
				9, 0, "INFETR");
		fields[18] = fieldINHOTR = new DecimalField(message, HEADERSIZE + 191,
				7, 0, "INHOTR");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field INNUTR using a String value.
	 */
	public void setINNUTR(String newvalue) {
		fieldINNUTR.setString(newvalue);
	}

	/**
	 * Get value of field INNUTR as a String.
	 */
	public String getINNUTR() {
		return fieldINNUTR.getString();
	}

	/**
	 * Set field INCONI using a String value.
	 */
	public void setINCONI(String newvalue) {
		fieldINCONI.setString(newvalue);
	}

	/**
	 * Get value of field INCONI as a String.
	 */
	public String getINCONI() {
		return fieldINCONI.getString();
	}

	/**
	 * Set field INCLIE using a String value.
	 */
	public void setINCLIE(String newvalue) {
		fieldINCLIE.setString(newvalue);
	}

	/**
	 * Get value of field INCLIE as a String.
	 */
	public String getINCLIE() {
		return fieldINCLIE.getString();
	}

	/**
	 * Set numeric field INCLIE using a BigDecimal value.
	 */
	public void setINCLIE(BigDecimal newvalue) {
		fieldINCLIE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INCLIE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINCLIE() {
		return fieldINCLIE.getBigDecimal();
	}

	/**
	 * Set field INUSRI using a String value.
	 */
	public void setINUSRI(String newvalue) {
		fieldINUSRI.setString(newvalue);
	}

	/**
	 * Get value of field INUSRI as a String.
	 */
	public String getINUSRI() {
		return fieldINUSRI.getString();
	}

	/**
	 * Set field INTPOP using a String value.
	 */
	public void setINTPOP(String newvalue) {
		fieldINTPOP.setString(newvalue);
	}

	/**
	 * Get value of field INTPOP as a String.
	 */
	public String getINTPOP() {
		return fieldINTPOP.getString();
	}

	/**
	 * Set field INTDCC using a String value.
	 */
	public void setINTDCC(String newvalue) {
		fieldINTDCC.setString(newvalue);
	}

	/**
	 * Get value of field INTDCC as a String.
	 */
	public String getINTDCC() {
		return fieldINTDCC.getString();
	}

	/**
	 * Set numeric field INTDCC using a BigDecimal value.
	 */
	public void setINTDCC(BigDecimal newvalue) {
		fieldINTDCC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTDCC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTDCC() {
		return fieldINTDCC.getBigDecimal();
	}

	/**
	 * Set field INCVV1 using a String value.
	 */
	public void setINCVV1(String newvalue) {
		fieldINCVV1.setString(newvalue);
	}

	/**
	 * Get value of field INCVV1 as a String.
	 */
	public String getINCVV1() {
		return fieldINCVV1.getString();
	}

	/**
	 * Set numeric field INCVV1 using a BigDecimal value.
	 */
	public void setINCVV1(BigDecimal newvalue) {
		fieldINCVV1.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INCVV1 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINCVV1() {
		return fieldINCVV1.getBigDecimal();
	}

	/**
	 * Set field INFEVE using a String value.
	 */
	public void setINFEVE(String newvalue) {
		fieldINFEVE.setString(newvalue);
	}

	/**
	 * Get value of field INFEVE as a String.
	 */
	public String getINFEVE() {
		return fieldINFEVE.getString();
	}

	/**
	 * Set numeric field INFEVE using a BigDecimal value.
	 */
	public void setINFEVE(BigDecimal newvalue) {
		fieldINFEVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INFEVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINFEVE() {
		return fieldINFEVE.getBigDecimal();
	}

	/**
	 * Set field INCTAA using a String value.
	 */
	public void setINCTAA(String newvalue) {
		fieldINCTAA.setString(newvalue);
	}

	/**
	 * Get value of field INCTAA as a String.
	 */
	public String getINCTAA() {
		return fieldINCTAA.getString();
	}

	/**
	 * Set numeric field INCTAA using a BigDecimal value.
	 */
	public void setINCTAA(BigDecimal newvalue) {
		fieldINCTAA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INCTAA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINCTAA() {
		return fieldINCTAA.getBigDecimal();
	}

	/**
	 * Set field INIMDI using a String value.
	 */
	public void setINIMDI(String newvalue) {
		fieldINIMDI.setString(newvalue);
	}

	/**
	 * Get value of field INIMDI as a String.
	 */
	public String getINIMDI() {
		return fieldINIMDI.getString();
	}

	/**
	 * Set numeric field INIMDI using a BigDecimal value.
	 */
	public void setINIMDI(BigDecimal newvalue) {
		fieldINIMDI.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INIMDI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINIMDI() {
		return fieldINIMDI.getBigDecimal();
	}

	/**
	 * Set field INSLDI using a String value.
	 */
	public void setINSLDI(String newvalue) {
		fieldINSLDI.setString(newvalue);
	}

	/**
	 * Get value of field INSLDI as a String.
	 */
	public String getINSLDI() {
		return fieldINSLDI.getString();
	}

	/**
	 * Set numeric field INSLDI using a BigDecimal value.
	 */
	public void setINSLDI(BigDecimal newvalue) {
		fieldINSLDI.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSLDI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSLDI() {
		return fieldINSLDI.getBigDecimal();
	}

	/**
	 * Set field INLDER using a String value.
	 */
	public void setINLDER(String newvalue) {
		fieldINLDER.setString(newvalue);
	}

	/**
	 * Get value of field INLDER as a String.
	 */
	public String getINLDER() {
		return fieldINLDER.getString();
	}

	/**
	 * Set numeric field INLDER using a BigDecimal value.
	 */
	public void setINLDER(BigDecimal newvalue) {
		fieldINLDER.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INLDER as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINLDER() {
		return fieldINLDER.getBigDecimal();
	}

	/**
	 * Set field INAUDE using a String value.
	 */
	public void setINAUDE(String newvalue) {
		fieldINAUDE.setString(newvalue);
	}

	/**
	 * Get value of field INAUDE as a String.
	 */
	public String getINAUDE() {
		return fieldINAUDE.getString();
	}

	/**
	 * Set numeric field INAUDE using a BigDecimal value.
	 */
	public void setINAUDE(BigDecimal newvalue) {
		fieldINAUDE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INAUDE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINAUDE() {
		return fieldINAUDE.getBigDecimal();
	}

	/**
	 * Set field INSADI using a String value.
	 */
	public void setINSADI(String newvalue) {
		fieldINSADI.setString(newvalue);
	}

	/**
	 * Get value of field INSADI as a String.
	 */
	public String getINSADI() {
		return fieldINSADI.getString();
	}

	/**
	 * Set numeric field INSADI using a BigDecimal value.
	 */
	public void setINSADI(BigDecimal newvalue) {
		fieldINSADI.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INSADI as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINSADI() {
		return fieldINSADI.getBigDecimal();
	}

	/**
	 * Set field INPOCO using a String value.
	 */
	public void setINPOCO(String newvalue) {
		fieldINPOCO.setString(newvalue);
	}

	/**
	 * Get value of field INPOCO as a String.
	 */
	public String getINPOCO() {
		return fieldINPOCO.getString();
	}

	/**
	 * Set numeric field INPOCO using a BigDecimal value.
	 */
	public void setINPOCO(BigDecimal newvalue) {
		fieldINPOCO.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INPOCO as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINPOCO() {
		return fieldINPOCO.getBigDecimal();
	}

	/**
	 * Set field INFOAU using a String value.
	 */
	public void setINFOAU(String newvalue) {
		fieldINFOAU.setString(newvalue);
	}

	/**
	 * Get value of field INFOAU as a String.
	 */
	public String getINFOAU() {
		return fieldINFOAU.getString();
	}

	/**
	 * Set field INNATS using a String value.
	 */
	public void setINNATS(String newvalue) {
		fieldINNATS.setString(newvalue);
	}

	/**
	 * Get value of field INNATS as a String.
	 */
	public String getINNATS() {
		return fieldINNATS.getString();
	}

	/**
	 * Set field INFETR using a String value.
	 */
	public void setINFETR(String newvalue) {
		fieldINFETR.setString(newvalue);
	}

	/**
	 * Get value of field INFETR as a String.
	 */
	public String getINFETR() {
		return fieldINFETR.getString();
	}

	/**
	 * Set numeric field INFETR using a BigDecimal value.
	 */
	public void setINFETR(BigDecimal newvalue) {
		fieldINFETR.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INFETR as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINFETR() {
		return fieldINFETR.getBigDecimal();
	}

	/**
	 * Set field INHOTR using a String value.
	 */
	public void setINHOTR(String newvalue) {
		fieldINHOTR.setString(newvalue);
	}

	/**
	 * Get value of field INHOTR as a String.
	 */
	public String getINHOTR() {
		return fieldINHOTR.getString();
	}

	/**
	 * Set numeric field INHOTR using a BigDecimal value.
	 */
	public void setINHOTR(BigDecimal newvalue) {
		fieldINHOTR.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INHOTR as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINHOTR() {
		return fieldINHOTR.getBigDecimal();
	}

}
