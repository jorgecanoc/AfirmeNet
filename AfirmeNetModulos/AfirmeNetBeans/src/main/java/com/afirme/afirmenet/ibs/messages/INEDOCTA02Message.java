package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INEDOCTA02 physical file
 * definition.
 * 
 * File level identifier is 1101028162652. Record format level identifier is
 * 49401024658D3.
 */
@SuppressWarnings("rawtypes")
public class INEDOCTA02Message extends MessageRecord {
	final static String fldnames[] = { "INTOPE", "INTUSR", "INTREF",
			"INTXPMTV", "INTFECHA", "INTHORA", "INTUSUARIO", "INTTIPO",
			"INTCUENTA", "INTPROD", "INTFECIMP", "INTIMPCOM", "INTIVACOM",
			"INTFECLOC", "INTHORLOC", "INTUSULOC" };
	final static String tnames[] = { "INTOPE", "INTUSR", "INTREF", "INTXPMTV",
			"INTFECHA", "INTHORA", "INTUSUARIO", "INTTIPO", "INTCUENTA",
			"INTPROD", "INTFECIMP", "INTIMPCOM", "INTIVACOM", "INTFECLOC",
			"INTHORLOC", "INTUSULOC" };
	final static String fid = "1101028162652";
	final static String rid = "49401024658D3";
	final static String fmtname = "INEDOCTA02";
	final int FIELDCOUNT = 16;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldINTOPE = null;
	private CharacterField fieldINTUSR = null;
	private CharacterField fieldINTREF = null;
	private CharacterField fieldINTXPMTV = null;
	private DecimalField fieldINTFECHA = null;
	private DecimalField fieldINTHORA = null;
	private CharacterField fieldINTUSUARIO = null;
	private CharacterField fieldINTTIPO = null;
	private CharacterField fieldINTCUENTA = null;
	private CharacterField fieldINTPROD = null;
	private DecimalField fieldINTFECIMP = null;
	private DecimalField fieldINTIMPCOM = null;
	private DecimalField fieldINTIVACOM = null;
	private DecimalField fieldINTFECLOC = null;
	private DecimalField fieldINTHORLOC = null;
	private CharacterField fieldINTUSULOC = null;

	/**
	 * Constructor for INEDOCTA02Message.
	 */
	public INEDOCTA02Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 137;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldINTOPE = new CharacterField(message, HEADERSIZE + 0,
				1, "INTOPE");
		fields[1] = fieldINTUSR = new CharacterField(message, HEADERSIZE + 1,
				10, "INTUSR");
		fields[2] = fieldINTREF = new CharacterField(message, HEADERSIZE + 11,
				12, "INTREF");
		fields[3] = fieldINTXPMTV = new CharacterField(message,
				HEADERSIZE + 23, 2, "INTXPMTV");
		fields[4] = fieldINTFECHA = new DecimalField(message, HEADERSIZE + 25,
				9, 0, "INTFECHA");
		fields[5] = fieldINTHORA = new DecimalField(message, HEADERSIZE + 34,
				7, 0, "INTHORA");
		fields[6] = fieldINTUSUARIO = new CharacterField(message,
				HEADERSIZE + 41, 10, "INTUSUARIO");
		fields[7] = fieldINTTIPO = new CharacterField(message, HEADERSIZE + 51,
				1, "INTTIPO");
		fields[8] = fieldINTCUENTA = new CharacterField(message,
				HEADERSIZE + 52, 20, "INTCUENTA");
		fields[9] = fieldINTPROD = new CharacterField(message, HEADERSIZE + 72,
				2, "INTPROD");
		fields[10] = fieldINTFECIMP = new DecimalField(message,
				HEADERSIZE + 74, 7, 0, "INTFECIMP");
		fields[11] = fieldINTIMPCOM = new DecimalField(message,
				HEADERSIZE + 81, 15, 2, "INTIMPCOM");
		fields[12] = fieldINTIVACOM = new DecimalField(message,
				HEADERSIZE + 96, 15, 2, "INTIVACOM");
		fields[13] = fieldINTFECLOC = new DecimalField(message,
				HEADERSIZE + 111, 9, 0, "INTFECLOC");
		fields[14] = fieldINTHORLOC = new DecimalField(message,
				HEADERSIZE + 120, 7, 0, "INTHORLOC");
		fields[15] = fieldINTUSULOC = new CharacterField(message,
				HEADERSIZE + 127, 10, "INTUSULOC");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field INTOPE using a String value.
	 */
	public void setINTOPE(String newvalue) {
		fieldINTOPE.setString(newvalue);
	}

	/**
	 * Get value of field INTOPE as a String.
	 */
	public String getINTOPE() {
		return fieldINTOPE.getString();
	}

	/**
	 * Set field INTUSR using a String value.
	 */
	public void setINTUSR(String newvalue) {
		fieldINTUSR.setString(newvalue);
	}

	/**
	 * Get value of field INTUSR as a String.
	 */
	public String getINTUSR() {
		return fieldINTUSR.getString();
	}

	/**
	 * Set field INTREF using a String value.
	 */
	public void setINTREF(String newvalue) {
		fieldINTREF.setString(newvalue);
	}

	/**
	 * Get value of field INTREF as a String.
	 */
	public String getINTREF() {
		return fieldINTREF.getString();
	}

	/**
	 * Set field INTXPMTV using a String value.
	 */
	public void setINTXPMTV(String newvalue) {
		fieldINTXPMTV.setString(newvalue);
	}

	/**
	 * Get value of field INTXPMTV as a String.
	 */
	public String getINTXPMTV() {
		return fieldINTXPMTV.getString();
	}

	/**
	 * Set field INTFECHA using a String value.
	 */
	public void setINTFECHA(String newvalue) {
		fieldINTFECHA.setString(newvalue);
	}

	/**
	 * Get value of field INTFECHA as a String.
	 */
	public String getINTFECHA() {
		return fieldINTFECHA.getString();
	}

	/**
	 * Set numeric field INTFECHA using a BigDecimal value.
	 */
	public void setINTFECHA(BigDecimal newvalue) {
		fieldINTFECHA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTFECHA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTFECHA() {
		return fieldINTFECHA.getBigDecimal();
	}

	/**
	 * Set field INTHORA using a String value.
	 */
	public void setINTHORA(String newvalue) {
		fieldINTHORA.setString(newvalue);
	}

	/**
	 * Get value of field INTHORA as a String.
	 */
	public String getINTHORA() {
		return fieldINTHORA.getString();
	}

	/**
	 * Set numeric field INTHORA using a BigDecimal value.
	 */
	public void setINTHORA(BigDecimal newvalue) {
		fieldINTHORA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTHORA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTHORA() {
		return fieldINTHORA.getBigDecimal();
	}

	/**
	 * Set field INTUSUARIO using a String value.
	 */
	public void setINTUSUARIO(String newvalue) {
		fieldINTUSUARIO.setString(newvalue);
	}

	/**
	 * Get value of field INTUSUARIO as a String.
	 */
	public String getINTUSUARIO() {
		return fieldINTUSUARIO.getString();
	}

	/**
	 * Set field INTTIPO using a String value.
	 */
	public void setINTTIPO(String newvalue) {
		fieldINTTIPO.setString(newvalue);
	}

	/**
	 * Get value of field INTTIPO as a String.
	 */
	public String getINTTIPO() {
		return fieldINTTIPO.getString();
	}

	/**
	 * Set field INTCUENTA using a String value.
	 */
	public void setINTCUENTA(String newvalue) {
		fieldINTCUENTA.setString(newvalue);
	}

	/**
	 * Get value of field INTCUENTA as a String.
	 */
	public String getINTCUENTA() {
		return fieldINTCUENTA.getString();
	}

	/**
	 * Set field INTPROD using a String value.
	 */
	public void setINTPROD(String newvalue) {
		fieldINTPROD.setString(newvalue);
	}

	/**
	 * Get value of field INTPROD as a String.
	 */
	public String getINTPROD() {
		return fieldINTPROD.getString();
	}

	/**
	 * Set field INTFECIMP using a String value.
	 */
	public void setINTFECIMP(String newvalue) {
		fieldINTFECIMP.setString(newvalue);
	}

	/**
	 * Get value of field INTFECIMP as a String.
	 */
	public String getINTFECIMP() {
		return fieldINTFECIMP.getString();
	}

	/**
	 * Set numeric field INTFECIMP using a BigDecimal value.
	 */
	public void setINTFECIMP(BigDecimal newvalue) {
		fieldINTFECIMP.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTFECIMP as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTFECIMP() {
		return fieldINTFECIMP.getBigDecimal();
	}

	/**
	 * Set field INTIMPCOM using a String value.
	 */
	public void setINTIMPCOM(String newvalue) {
		fieldINTIMPCOM.setString(newvalue);
	}

	/**
	 * Get value of field INTIMPCOM as a String.
	 */
	public String getINTIMPCOM() {
		return fieldINTIMPCOM.getString();
	}

	/**
	 * Set numeric field INTIMPCOM using a BigDecimal value.
	 */
	public void setINTIMPCOM(BigDecimal newvalue) {
		fieldINTIMPCOM.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTIMPCOM as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTIMPCOM() {
		return fieldINTIMPCOM.getBigDecimal();
	}

	/**
	 * Set field INTIVACOM using a String value.
	 */
	public void setINTIVACOM(String newvalue) {
		fieldINTIVACOM.setString(newvalue);
	}

	/**
	 * Get value of field INTIVACOM as a String.
	 */
	public String getINTIVACOM() {
		return fieldINTIVACOM.getString();
	}

	/**
	 * Set numeric field INTIVACOM using a BigDecimal value.
	 */
	public void setINTIVACOM(BigDecimal newvalue) {
		fieldINTIVACOM.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTIVACOM as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTIVACOM() {
		return fieldINTIVACOM.getBigDecimal();
	}

	/**
	 * Set field INTFECLOC using a String value.
	 */
	public void setINTFECLOC(String newvalue) {
		fieldINTFECLOC.setString(newvalue);
	}

	/**
	 * Get value of field INTFECLOC as a String.
	 */
	public String getINTFECLOC() {
		return fieldINTFECLOC.getString();
	}

	/**
	 * Set numeric field INTFECLOC using a BigDecimal value.
	 */
	public void setINTFECLOC(BigDecimal newvalue) {
		fieldINTFECLOC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTFECLOC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTFECLOC() {
		return fieldINTFECLOC.getBigDecimal();
	}

	/**
	 * Set field INTHORLOC using a String value.
	 */
	public void setINTHORLOC(String newvalue) {
		fieldINTHORLOC.setString(newvalue);
	}

	/**
	 * Get value of field INTHORLOC as a String.
	 */
	public String getINTHORLOC() {
		return fieldINTHORLOC.getString();
	}

	/**
	 * Set numeric field INTHORLOC using a BigDecimal value.
	 */
	public void setINTHORLOC(BigDecimal newvalue) {
		fieldINTHORLOC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTHORLOC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTHORLOC() {
		return fieldINTHORLOC.getBigDecimal();
	}

	/**
	 * Set field INTUSULOC using a String value.
	 */
	public void setINTUSULOC(String newvalue) {
		fieldINTUSULOC.setString(newvalue);
	}

	/**
	 * Get value of field INTUSULOC as a String.
	 */
	public String getINTUSULOC() {
		return fieldINTUSULOC.getString();
	}

}
