package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;
import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from ECONFDSPEI physical file
 * definition. File level identifier is 1100902175022. Record format level
 * identifier is 3591DD16F820B.
 */
@SuppressWarnings("rawtypes")
public class ECONFDSPEIMessage extends MessageRecord {
	final static String fldnames[] = { "EXNFUSER", "EXNFREF", "EXREFER",
			"EXCVRA" };
	final static String tnames[] = { "EXNFUSER", "EXNFREF", "EXREFER", "EXCVRA" };
	final static String fid = "1100902175022";
	final static String rid = "3591DD16F820B";
	final static String fmtname = "ECONFDSPEI";
	final int FIELDCOUNT = 4;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldEXNFUSER = null;
	private CharacterField fieldEXNFREF = null;
	private DecimalField fieldEXREFER = null;
	private CharacterField fieldEXCVRA = null;

	/**
	 * Constructor for ECONFDSPEIMessage.
	 */
	public ECONFDSPEIMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 64;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldEXNFUSER = new CharacterField(message, HEADERSIZE + 0,
				10, "EXNFUSER");
		fields[1] = fieldEXNFREF = new CharacterField(message, HEADERSIZE + 10,
				16, "EXNFREF");
		fields[2] = fieldEXREFER = new DecimalField(message, HEADERSIZE + 26,
				8, 0, "EXREFER");
		fields[3] = fieldEXCVRA = new CharacterField(message, HEADERSIZE + 34,
				30, "EXCVRA");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field EXNFUSER using a String value.
	 */
	public void setEXNFUSER(String newvalue) {
		fieldEXNFUSER.setString(newvalue);
	}

	/**
	 * Get value of field EXNFUSER as a String.
	 */
	public String getEXNFUSER() {
		return fieldEXNFUSER.getString();
	}

	/**
	 * Set field EXNFREF using a String value.
	 */
	public void setEXNFREF(String newvalue) {
		fieldEXNFREF.setString(newvalue);
	}

	/**
	 * Get value of field EXNFREF as a String.
	 */
	public String getEXNFREF() {
		return fieldEXNFREF.getString();
	}

	/**
	 * Set field EXREFER using a String value.
	 */
	public void setEXREFER(String newvalue) {
		fieldEXREFER.setString(newvalue);
	}

	/**
	 * Get value of field EXREFER as a String.
	 */
	public String getEXREFER() {
		return fieldEXREFER.getString();
	}

	/**
	 * Set numeric field EXREFER using a BigDecimal value.
	 */
	public void setEXREFER(BigDecimal newvalue) {
		fieldEXREFER.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field EXREFER as a BigDecimal.
	 */
	public BigDecimal getBigDecimalEXREFER() {
		return fieldEXREFER.getBigDecimal();
	}

	/**
	 * Set field EXCVRA using a String value.
	 */
	public void setEXCVRA(String newvalue) {
		fieldEXCVRA.setString(newvalue);
	}

	/**
	 * Get value of field EXCVRA as a String.
	 */
	public String getEXCVRA() {
		return fieldEXCVRA.getString();
	}

}
