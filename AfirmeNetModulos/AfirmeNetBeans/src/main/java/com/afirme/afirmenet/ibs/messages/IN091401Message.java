package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN091401 physical file
 * definition.
 * 
 * File level identifier is 1000802211852. Record format level identifier is
 * 5285A0FDF1A3E.
 */

public class IN091401Message extends MessageRecord {
	final int FIELDCOUNT = 8;
	private CharacterField fieldIN914USR = null;
	private DecimalField fieldIN914ACC = null;
	private DecimalField fieldIN914CKN = null;
	private DecimalField fieldIN914AMT = null;
	private CharacterField fieldIN914TLP = null;
	private CharacterField fieldIN914CONT = null;
	private DecimalField fieldIN914CLAVE = null;
	private CharacterField fieldIN914RETC = null;

	/**
	 * Constructor for IN091401Message.
	 */
	public IN091401Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 113;
		fileid = "1000802211852";
		recordid = "5285A0FDF1A3E";
		message = new byte[getByteLength()];
		formatname = "IN091401";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "IN914USR";
		tagnames[0] = "IN914USR";
		fields[0] = fieldIN914USR = new CharacterField(message, HEADERSIZE + 0,
				10, "IN914USR");
		fieldnames[1] = "IN914ACC";
		tagnames[1] = "IN914ACC";
		fields[1] = fieldIN914ACC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "IN914ACC");
		fieldnames[2] = "IN914CKN";
		tagnames[2] = "IN914CKN";
		fields[2] = fieldIN914CKN = new DecimalField(message, HEADERSIZE + 23,
				10, 0, "IN914CKN");
		fieldnames[3] = "IN914AMT";
		tagnames[3] = "IN914AMT";
		fields[3] = fieldIN914AMT = new DecimalField(message, HEADERSIZE + 33,
				17, 2, "IN914AMT");
		fieldnames[4] = "IN914TLP";
		tagnames[4] = "IN914TLP";
		fields[4] = fieldIN914TLP = new CharacterField(message,
				HEADERSIZE + 50, 11, "IN914TLP");
		fieldnames[5] = "IN914CONT";
		tagnames[5] = "IN914CONT";
		fields[5] = fieldIN914CONT = new CharacterField(message,
				HEADERSIZE + 61, 35, "IN914CONT");
		fieldnames[6] = "IN914CLAVE";
		tagnames[6] = "IN914CLAVE";
		fields[6] = fieldIN914CLAVE = new DecimalField(message,
				HEADERSIZE + 96, 13, 0, "IN914CLAVE");
		fieldnames[7] = "IN914RETC";
		tagnames[7] = "IN914RETC";
		fields[7] = fieldIN914RETC = new CharacterField(message,
				HEADERSIZE + 109, 4, "IN914RETC");
	}

	/**
	 * Return value of numeric field IN914ACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN914ACC() {
		return fieldIN914ACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field IN914AMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN914AMT() {
		return fieldIN914AMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field IN914CKN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN914CKN() {
		return fieldIN914CKN.getBigDecimal();
	}

	/**
	 * Return value of numeric field IN914CLAVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN914CLAVE() {
		return fieldIN914CLAVE.getBigDecimal();
	}

	/**
	 * Get value of field IN914ACC as a String.
	 */
	public String getIN914ACC() {
		return fieldIN914ACC.getString();
	}

	/**
	 * Get value of field IN914AMT as a String.
	 */
	public String getIN914AMT() {
		return fieldIN914AMT.getString();
	}

	/**
	 * Get value of field IN914CKN as a String.
	 */
	public String getIN914CKN() {
		return fieldIN914CKN.getString();
	}

	/**
	 * Get value of field IN914CLAVE as a String.
	 */
	public String getIN914CLAVE() {
		return fieldIN914CLAVE.getString();
	}

	/**
	 * Get value of field IN914CONT as a String.
	 */
	public String getIN914CONT() {
		return fieldIN914CONT.getString();
	}

	/**
	 * Get value of field IN914RETC as a String.
	 */
	public String getIN914RETC() {
		return fieldIN914RETC.getString();
	}

	/**
	 * Get value of field IN914TLP as a String.
	 */
	public String getIN914TLP() {
		return fieldIN914TLP.getString();
	}

	/**
	 * Get value of field IN914USR as a String.
	 */
	public String getIN914USR() {
		return fieldIN914USR.getString();
	}

	/**
	 * Set field IN914ACC using a String value.
	 */
	public void setIN914ACC(String newvalue) {
		fieldIN914ACC.setString(newvalue);
	}

	/**
	 * Set numeric field IN914ACC using a BigDecimal value.
	 */
	public void setIN914ACC(BigDecimal newvalue) {
		fieldIN914ACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN914AMT using a String value.
	 */
	public void setIN914AMT(String newvalue) {
		fieldIN914AMT.setString(newvalue);
	}

	/**
	 * Set numeric field IN914AMT using a BigDecimal value.
	 */
	public void setIN914AMT(BigDecimal newvalue) {
		fieldIN914AMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN914CKN using a String value.
	 */
	public void setIN914CKN(String newvalue) {
		fieldIN914CKN.setString(newvalue);
	}

	/**
	 * Set numeric field IN914CKN using a BigDecimal value.
	 */
	public void setIN914CKN(BigDecimal newvalue) {
		fieldIN914CKN.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN914CLAVE using a String value.
	 */
	public void setIN914CLAVE(String newvalue) {
		fieldIN914CLAVE.setString(newvalue);
	}

	/**
	 * Set numeric field IN914CLAVE using a BigDecimal value.
	 */
	public void setIN914CLAVE(BigDecimal newvalue) {
		fieldIN914CLAVE.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN914CONT using a String value.
	 */
	public void setIN914CONT(String newvalue) {
		fieldIN914CONT.setString(newvalue);
	}

	/**
	 * Set field IN914RETC using a String value.
	 */
	public void setIN914RETC(String newvalue) {
		fieldIN914RETC.setString(newvalue);
	}

	/**
	 * Set field IN914TLP using a String value.
	 */
	public void setIN914TLP(String newvalue) {
		fieldIN914TLP.setString(newvalue);
	}

	/**
	 * Set field IN914USR using a String value.
	 */
	public void setIN914USR(String newvalue) {
		fieldIN914USR.setString(newvalue);
	}
}