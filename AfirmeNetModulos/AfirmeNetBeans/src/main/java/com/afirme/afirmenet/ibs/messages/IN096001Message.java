package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN096001 physical file
 * definition.
 * 
 * File level identifier is 1030804174322. Record format level identifier is
 * 49DD8AF195989.
 */
@SuppressWarnings("rawtypes")
public class IN096001Message extends MessageRecord {
	final static String fldnames[] = { "IN01USER", "IN01TARJ", "IN01STAT",
			"IN01NOMB", "IN01LDAT", "IN01LMAT", "IN01LDPO", "IN01LMPO",
			"IN01LDVE", "IN01LMVE", "IN01AAVE", "IN01MMVE", "IN01DDVE",
			"IN01AAEX", "IN01MMEX", "IN01DDEX", "IN01TC10" };
	final static String tnames[] = { "IN01USER", "IN01TARJ", "IN01STAT",
			"IN01NOMB", "IN01LDAT", "IN01LMAT", "IN01LDPO", "IN01LMPO",
			"IN01LDVE", "IN01LMVE", "IN01AAVE", "IN01MMVE", "IN01DDVE",
			"IN01AAEX", "IN01MMEX", "IN01DDEX", "IN01TC10" };
	final static String fid = "1030804174322";
	final static String rid = "49DD8AF195989";
	final static String fmtname = "IN096001";
	final int FIELDCOUNT = 17;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldIN01USER = null;
	private DecimalField fieldIN01TARJ = null;
	private CharacterField fieldIN01STAT = null;
	private CharacterField fieldIN01NOMB = null;
	private DecimalField fieldIN01LDAT = null;
	private DecimalField fieldIN01LMAT = null;
	private DecimalField fieldIN01LDPO = null;
	private DecimalField fieldIN01LMPO = null;
	private DecimalField fieldIN01LDVE = null;
	private DecimalField fieldIN01LMVE = null;
	private DecimalField fieldIN01AAVE = null;
	private DecimalField fieldIN01MMVE = null;
	private DecimalField fieldIN01DDVE = null;
	private DecimalField fieldIN01AAEX = null;
	private DecimalField fieldIN01MMEX = null;
	private DecimalField fieldIN01DDEX = null;
	private DecimalField fieldIN01TC10 = null;

	/**
	 * Constructor for IN096001Message.
	 */
	public IN096001Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 183;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldIN01USER = new CharacterField(message, HEADERSIZE + 0,
				10, "IN01USER");
		fields[1] = fieldIN01TARJ = new DecimalField(message, HEADERSIZE + 10,
				17, 0, "IN01TARJ");
		fields[2] = fieldIN01STAT = new CharacterField(message,
				HEADERSIZE + 27, 1, "IN01STAT");
		fields[3] = fieldIN01NOMB = new CharacterField(message,
				HEADERSIZE + 28, 40, "IN01NOMB");
		fields[4] = fieldIN01LDAT = new DecimalField(message, HEADERSIZE + 68,
				15, 2, "IN01LDAT");
		fields[5] = fieldIN01LMAT = new DecimalField(message, HEADERSIZE + 83,
				15, 2, "IN01LMAT");
		fields[6] = fieldIN01LDPO = new DecimalField(message, HEADERSIZE + 98,
				15, 2, "IN01LDPO");
		fields[7] = fieldIN01LMPO = new DecimalField(message, HEADERSIZE + 113,
				15, 2, "IN01LMPO");
		fields[8] = fieldIN01LDVE = new DecimalField(message, HEADERSIZE + 128,
				15, 2, "IN01LDVE");
		fields[9] = fieldIN01LMVE = new DecimalField(message, HEADERSIZE + 143,
				15, 2, "IN01LMVE");
		fields[10] = fieldIN01AAVE = new DecimalField(message,
				HEADERSIZE + 158, 5, 0, "IN01AAVE");
		fields[11] = fieldIN01MMVE = new DecimalField(message,
				HEADERSIZE + 163, 3, 0, "IN01MMVE");
		fields[12] = fieldIN01DDVE = new DecimalField(message,
				HEADERSIZE + 166, 3, 0, "IN01DDVE");
		fields[13] = fieldIN01AAEX = new DecimalField(message,
				HEADERSIZE + 169, 5, 0, "IN01AAEX");
		fields[14] = fieldIN01MMEX = new DecimalField(message,
				HEADERSIZE + 174, 3, 0, "IN01MMEX");
		fields[15] = fieldIN01DDEX = new DecimalField(message,
				HEADERSIZE + 177, 3, 0, "IN01DDEX");
		fields[16] = fieldIN01TC10 = new DecimalField(message,
				HEADERSIZE + 180, 3, 0, "IN01TC10");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field IN01USER using a String value.
	 */
	public void setIN01USER(String newvalue) {
		fieldIN01USER.setString(newvalue);
	}

	/**
	 * Get value of field IN01USER as a String.
	 */
	public String getIN01USER() {
		return fieldIN01USER.getString();
	}

	/**
	 * Set field IN01TARJ using a String value.
	 */
	public void setIN01TARJ(String newvalue) {
		fieldIN01TARJ.setString(newvalue);
	}

	/**
	 * Get value of field IN01TARJ as a String.
	 */
	public String getIN01TARJ() {
		return fieldIN01TARJ.getString();
	}

	/**
	 * Set numeric field IN01TARJ using a BigDecimal value.
	 */
	public void setIN01TARJ(BigDecimal newvalue) {
		fieldIN01TARJ.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01TARJ as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01TARJ() {
		return fieldIN01TARJ.getBigDecimal();
	}

	/**
	 * Set field IN01STAT using a String value.
	 */
	public void setIN01STAT(String newvalue) {
		fieldIN01STAT.setString(newvalue);
	}

	/**
	 * Get value of field IN01STAT as a String.
	 */
	public String getIN01STAT() {
		return fieldIN01STAT.getString();
	}

	/**
	 * Set field IN01NOMB using a String value.
	 */
	public void setIN01NOMB(String newvalue) {
		fieldIN01NOMB.setString(newvalue);
	}

	/**
	 * Get value of field IN01NOMB as a String.
	 */
	public String getIN01NOMB() {
		return fieldIN01NOMB.getString();
	}

	/**
	 * Set field IN01LDAT using a String value.
	 */
	public void setIN01LDAT(String newvalue) {
		fieldIN01LDAT.setString(newvalue);
	}

	/**
	 * Get value of field IN01LDAT as a String.
	 */
	public String getIN01LDAT() {
		return fieldIN01LDAT.getString();
	}

	/**
	 * Set numeric field IN01LDAT using a BigDecimal value.
	 */
	public void setIN01LDAT(BigDecimal newvalue) {
		fieldIN01LDAT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LDAT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LDAT() {
		return fieldIN01LDAT.getBigDecimal();
	}

	/**
	 * Set field IN01LMAT using a String value.
	 */
	public void setIN01LMAT(String newvalue) {
		fieldIN01LMAT.setString(newvalue);
	}

	/**
	 * Get value of field IN01LMAT as a String.
	 */
	public String getIN01LMAT() {
		return fieldIN01LMAT.getString();
	}

	/**
	 * Set numeric field IN01LMAT using a BigDecimal value.
	 */
	public void setIN01LMAT(BigDecimal newvalue) {
		fieldIN01LMAT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LMAT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LMAT() {
		return fieldIN01LMAT.getBigDecimal();
	}

	/**
	 * Set field IN01LDPO using a String value.
	 */
	public void setIN01LDPO(String newvalue) {
		fieldIN01LDPO.setString(newvalue);
	}

	/**
	 * Get value of field IN01LDPO as a String.
	 */
	public String getIN01LDPO() {
		return fieldIN01LDPO.getString();
	}

	/**
	 * Set numeric field IN01LDPO using a BigDecimal value.
	 */
	public void setIN01LDPO(BigDecimal newvalue) {
		fieldIN01LDPO.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LDPO as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LDPO() {
		return fieldIN01LDPO.getBigDecimal();
	}

	/**
	 * Set field IN01LMPO using a String value.
	 */
	public void setIN01LMPO(String newvalue) {
		fieldIN01LMPO.setString(newvalue);
	}

	/**
	 * Get value of field IN01LMPO as a String.
	 */
	public String getIN01LMPO() {
		return fieldIN01LMPO.getString();
	}

	/**
	 * Set numeric field IN01LMPO using a BigDecimal value.
	 */
	public void setIN01LMPO(BigDecimal newvalue) {
		fieldIN01LMPO.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LMPO as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LMPO() {
		return fieldIN01LMPO.getBigDecimal();
	}

	/**
	 * Set field IN01LDVE using a String value.
	 */
	public void setIN01LDVE(String newvalue) {
		fieldIN01LDVE.setString(newvalue);
	}

	/**
	 * Get value of field IN01LDVE as a String.
	 */
	public String getIN01LDVE() {
		return fieldIN01LDVE.getString();
	}

	/**
	 * Set numeric field IN01LDVE using a BigDecimal value.
	 */
	public void setIN01LDVE(BigDecimal newvalue) {
		fieldIN01LDVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LDVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LDVE() {
		return fieldIN01LDVE.getBigDecimal();
	}

	/**
	 * Set field IN01LMVE using a String value.
	 */
	public void setIN01LMVE(String newvalue) {
		fieldIN01LMVE.setString(newvalue);
	}

	/**
	 * Get value of field IN01LMVE as a String.
	 */
	public String getIN01LMVE() {
		return fieldIN01LMVE.getString();
	}

	/**
	 * Set numeric field IN01LMVE using a BigDecimal value.
	 */
	public void setIN01LMVE(BigDecimal newvalue) {
		fieldIN01LMVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01LMVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01LMVE() {
		return fieldIN01LMVE.getBigDecimal();
	}

	/**
	 * Set field IN01AAVE using a String value.
	 */
	public void setIN01AAVE(String newvalue) {
		fieldIN01AAVE.setString(newvalue);
	}

	/**
	 * Get value of field IN01AAVE as a String.
	 */
	public String getIN01AAVE() {
		return fieldIN01AAVE.getString();
	}

	/**
	 * Set numeric field IN01AAVE using a BigDecimal value.
	 */
	public void setIN01AAVE(BigDecimal newvalue) {
		fieldIN01AAVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01AAVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01AAVE() {
		return fieldIN01AAVE.getBigDecimal();
	}

	/**
	 * Set field IN01MMVE using a String value.
	 */
	public void setIN01MMVE(String newvalue) {
		fieldIN01MMVE.setString(newvalue);
	}

	/**
	 * Get value of field IN01MMVE as a String.
	 */
	public String getIN01MMVE() {
		return fieldIN01MMVE.getString();
	}

	/**
	 * Set numeric field IN01MMVE using a BigDecimal value.
	 */
	public void setIN01MMVE(BigDecimal newvalue) {
		fieldIN01MMVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01MMVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01MMVE() {
		return fieldIN01MMVE.getBigDecimal();
	}

	/**
	 * Set field IN01DDVE using a String value.
	 */
	public void setIN01DDVE(String newvalue) {
		fieldIN01DDVE.setString(newvalue);
	}

	/**
	 * Get value of field IN01DDVE as a String.
	 */
	public String getIN01DDVE() {
		return fieldIN01DDVE.getString();
	}

	/**
	 * Set numeric field IN01DDVE using a BigDecimal value.
	 */
	public void setIN01DDVE(BigDecimal newvalue) {
		fieldIN01DDVE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01DDVE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01DDVE() {
		return fieldIN01DDVE.getBigDecimal();
	}

	/**
	 * Set field IN01AAEX using a String value.
	 */
	public void setIN01AAEX(String newvalue) {
		fieldIN01AAEX.setString(newvalue);
	}

	/**
	 * Get value of field IN01AAEX as a String.
	 */
	public String getIN01AAEX() {
		return fieldIN01AAEX.getString();
	}

	/**
	 * Set numeric field IN01AAEX using a BigDecimal value.
	 */
	public void setIN01AAEX(BigDecimal newvalue) {
		fieldIN01AAEX.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01AAEX as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01AAEX() {
		return fieldIN01AAEX.getBigDecimal();
	}

	/**
	 * Set field IN01MMEX using a String value.
	 */
	public void setIN01MMEX(String newvalue) {
		fieldIN01MMEX.setString(newvalue);
	}

	/**
	 * Get value of field IN01MMEX as a String.
	 */
	public String getIN01MMEX() {
		return fieldIN01MMEX.getString();
	}

	/**
	 * Set numeric field IN01MMEX using a BigDecimal value.
	 */
	public void setIN01MMEX(BigDecimal newvalue) {
		fieldIN01MMEX.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01MMEX as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01MMEX() {
		return fieldIN01MMEX.getBigDecimal();
	}

	/**
	 * Set field IN01DDEX using a String value.
	 */
	public void setIN01DDEX(String newvalue) {
		fieldIN01DDEX.setString(newvalue);
	}

	/**
	 * Get value of field IN01DDEX as a String.
	 */
	public String getIN01DDEX() {
		return fieldIN01DDEX.getString();
	}

	/**
	 * Set numeric field IN01DDEX using a BigDecimal value.
	 */
	public void setIN01DDEX(BigDecimal newvalue) {
		fieldIN01DDEX.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01DDEX as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01DDEX() {
		return fieldIN01DDEX.getBigDecimal();
	}

	/**
	 * Set field IN01TC10 using a String value.
	 */
	public void setIN01TC10(String newvalue) {
		fieldIN01TC10.setString(newvalue);
	}

	/**
	 * Get value of field IN01TC10 as a String.
	 */
	public String getIN01TC10() {
		return fieldIN01TC10.getString();
	}

	/**
	 * Set numeric field IN01TC10 using a BigDecimal value.
	 */
	public void setIN01TC10(BigDecimal newvalue) {
		fieldIN01TC10.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field IN01TC10 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN01TC10() {
		return fieldIN01TC10.getBigDecimal();
	}

}
