package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from PROCHEDSJV physical file
 * definition.
 * 
 * File level identifier is 1060203114030. Record format level identifier is
 * 4CD978D1255B7.
 */
@SuppressWarnings("rawtypes")
public class PROCHEDSJVMessage extends MessageRecord {
	final static String fldnames[] = { "PROCHEUSER", "PROCHEACC", "PROCHERMK",
			"PROCHEDT1", "PROCHEDT2", "PROCHEDT3", "PROCHEFCK", "PROCHETCK",
			"PROCHEAMT", "PROCHEPTS", "PROCHEFLG" };
	final static String tnames[] = { "PROCHEUSER", "PROCHEACC", "PROCHERMK",
			"PROCHEDT1", "PROCHEDT2", "PROCHEDT3", "PROCHEFCK", "PROCHETCK",
			"PROCHEAMT", "PROCHEPTS", "PROCHEFLG" };
	final static String fid = "1060203114030";
	final static String rid = "4CD978D1255B7";
	final static String fmtname = "PROCHEDSJV";
	final int FIELDCOUNT = 11;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldPROCHEUSER = null;
	private DecimalField fieldPROCHEACC = null;
	private CharacterField fieldPROCHERMK = null;
	private DecimalField fieldPROCHEDT1 = null;
	private DecimalField fieldPROCHEDT2 = null;
	private DecimalField fieldPROCHEDT3 = null;
	private DecimalField fieldPROCHEFCK = null;
	private DecimalField fieldPROCHETCK = null;
	private DecimalField fieldPROCHEAMT = null;
	private DecimalField fieldPROCHEPTS = null;
	private CharacterField fieldPROCHEFLG = null;

	/**
	 * Constructor for PROCHEDSJVMessage.
	 */
	public PROCHEDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 104;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldPROCHEUSER = new CharacterField(message,
				HEADERSIZE + 0, 10, "PROCHEUSER");
		fields[1] = fieldPROCHEACC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "PROCHEACC");
		fields[2] = fieldPROCHERMK = new CharacterField(message,
				HEADERSIZE + 23, 30, "PROCHERMK");
		fields[3] = fieldPROCHEDT1 = new DecimalField(message, HEADERSIZE + 53,
				3, 0, "PROCHEDT1");
		fields[4] = fieldPROCHEDT2 = new DecimalField(message, HEADERSIZE + 56,
				3, 0, "PROCHEDT2");
		fields[5] = fieldPROCHEDT3 = new DecimalField(message, HEADERSIZE + 59,
				3, 0, "PROCHEDT3");
		fields[6] = fieldPROCHEFCK = new DecimalField(message, HEADERSIZE + 62,
				10, 0, "PROCHEFCK");
		fields[7] = fieldPROCHETCK = new DecimalField(message, HEADERSIZE + 72,
				10, 0, "PROCHETCK");
		fields[8] = fieldPROCHEAMT = new DecimalField(message, HEADERSIZE + 82,
				15, 2, "PROCHEAMT");
		fields[9] = fieldPROCHEPTS = new DecimalField(message, HEADERSIZE + 97,
				6, 0, "PROCHEPTS");
		fields[10] = fieldPROCHEFLG = new CharacterField(message,
				HEADERSIZE + 103, 1, "PROCHEFLG");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field PROCHEUSER using a String value.
	 */
	public void setPROCHEUSER(String newvalue) {
		fieldPROCHEUSER.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEUSER as a String.
	 */
	public String getPROCHEUSER() {
		return fieldPROCHEUSER.getString();
	}

	/**
	 * Set field PROCHEACC using a String value.
	 */
	public void setPROCHEACC(String newvalue) {
		fieldPROCHEACC.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEACC as a String.
	 */
	public String getPROCHEACC() {
		return fieldPROCHEACC.getString();
	}

	/**
	 * Set numeric field PROCHEACC using a BigDecimal value.
	 */
	public void setPROCHEACC(BigDecimal newvalue) {
		fieldPROCHEACC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEACC() {
		return fieldPROCHEACC.getBigDecimal();
	}

	/**
	 * Set field PROCHERMK using a String value.
	 */
	public void setPROCHERMK(String newvalue) {
		fieldPROCHERMK.setString(newvalue);
	}

	/**
	 * Get value of field PROCHERMK as a String.
	 */
	public String getPROCHERMK() {
		return fieldPROCHERMK.getString();
	}

	/**
	 * Set field PROCHEDT1 using a String value.
	 */
	public void setPROCHEDT1(String newvalue) {
		fieldPROCHEDT1.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEDT1 as a String.
	 */
	public String getPROCHEDT1() {
		return fieldPROCHEDT1.getString();
	}

	/**
	 * Set numeric field PROCHEDT1 using a BigDecimal value.
	 */
	public void setPROCHEDT1(BigDecimal newvalue) {
		fieldPROCHEDT1.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEDT1 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEDT1() {
		return fieldPROCHEDT1.getBigDecimal();
	}

	/**
	 * Set field PROCHEDT2 using a String value.
	 */
	public void setPROCHEDT2(String newvalue) {
		fieldPROCHEDT2.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEDT2 as a String.
	 */
	public String getPROCHEDT2() {
		return fieldPROCHEDT2.getString();
	}

	/**
	 * Set numeric field PROCHEDT2 using a BigDecimal value.
	 */
	public void setPROCHEDT2(BigDecimal newvalue) {
		fieldPROCHEDT2.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEDT2 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEDT2() {
		return fieldPROCHEDT2.getBigDecimal();
	}

	/**
	 * Set field PROCHEDT3 using a String value.
	 */
	public void setPROCHEDT3(String newvalue) {
		fieldPROCHEDT3.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEDT3 as a String.
	 */
	public String getPROCHEDT3() {
		return fieldPROCHEDT3.getString();
	}

	/**
	 * Set numeric field PROCHEDT3 using a BigDecimal value.
	 */
	public void setPROCHEDT3(BigDecimal newvalue) {
		fieldPROCHEDT3.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEDT3 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEDT3() {
		return fieldPROCHEDT3.getBigDecimal();
	}

	/**
	 * Set field PROCHEFCK using a String value.
	 */
	public void setPROCHEFCK(String newvalue) {
		fieldPROCHEFCK.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEFCK as a String.
	 */
	public String getPROCHEFCK() {
		return fieldPROCHEFCK.getString();
	}

	/**
	 * Set numeric field PROCHEFCK using a BigDecimal value.
	 */
	public void setPROCHEFCK(BigDecimal newvalue) {
		fieldPROCHEFCK.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEFCK as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEFCK() {
		return fieldPROCHEFCK.getBigDecimal();
	}

	/**
	 * Set field PROCHETCK using a String value.
	 */
	public void setPROCHETCK(String newvalue) {
		fieldPROCHETCK.setString(newvalue);
	}

	/**
	 * Get value of field PROCHETCK as a String.
	 */
	public String getPROCHETCK() {
		return fieldPROCHETCK.getString();
	}

	/**
	 * Set numeric field PROCHETCK using a BigDecimal value.
	 */
	public void setPROCHETCK(BigDecimal newvalue) {
		fieldPROCHETCK.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHETCK as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHETCK() {
		return fieldPROCHETCK.getBigDecimal();
	}

	/**
	 * Set field PROCHEAMT using a String value.
	 */
	public void setPROCHEAMT(String newvalue) {
		fieldPROCHEAMT.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEAMT as a String.
	 */
	public String getPROCHEAMT() {
		return fieldPROCHEAMT.getString();
	}

	/**
	 * Set numeric field PROCHEAMT using a BigDecimal value.
	 */
	public void setPROCHEAMT(BigDecimal newvalue) {
		fieldPROCHEAMT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEAMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEAMT() {
		return fieldPROCHEAMT.getBigDecimal();
	}

	/**
	 * Set field PROCHEPTS using a String value.
	 */
	public void setPROCHEPTS(String newvalue) {
		fieldPROCHEPTS.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEPTS as a String.
	 */
	public String getPROCHEPTS() {
		return fieldPROCHEPTS.getString();
	}

	/**
	 * Set numeric field PROCHEPTS using a BigDecimal value.
	 */
	public void setPROCHEPTS(BigDecimal newvalue) {
		fieldPROCHEPTS.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field PROCHEPTS as a BigDecimal.
	 */
	public BigDecimal getBigDecimalPROCHEPTS() {
		return fieldPROCHEPTS.getBigDecimal();
	}

	/**
	 * Set field PROCHEFLG using a String value.
	 */
	public void setPROCHEFLG(String newvalue) {
		fieldPROCHEFLG.setString(newvalue);
	}

	/**
	 * Get value of field PROCHEFLG as a String.
	 */
	public String getPROCHEFLG() {
		return fieldPROCHEFLG.getString();
	}

}
