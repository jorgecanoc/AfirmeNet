package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from IN095401 physical file
 * definition.
 * 
 * File level identifier is 1000907181539. Record format level identifier is
 * 2AB6F3171DBFE.
 */

public class IN095401Message extends MessageRecord {
	final int FIELDCOUNT = 10;
	private CharacterField fieldIN954USR = null;
	private DecimalField fieldIN954DAC = null;
	private CharacterField fieldIN954CCY = null;
	private DecimalField fieldIN954AMT = null;
	private CharacterField fieldIN954APL1 = null;
	private CharacterField fieldIN954BNE1 = null;
	private CharacterField fieldIN954BNE2 = null;
	private CharacterField fieldIN954BNF3 = null;
	private CharacterField fieldIN954DTP1 = null;
	private CharacterField fieldIN954DTP2 = null;

	/**
	 * Constructor for IN095401Message.
	 */
	public IN095401Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 228;
		fileid = "1000907181539";
		recordid = "2AB6F3171DBFE";
		message = new byte[getByteLength()];
		formatname = "IN095401";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "IN954USR";
		tagnames[0] = "IN954USR";
		fields[0] = fieldIN954USR = new CharacterField(message, HEADERSIZE + 0,
				10, "IN954USR");
		fieldnames[1] = "IN954DAC";
		tagnames[1] = "IN954DAC";
		fields[1] = fieldIN954DAC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "IN954DAC");
		fieldnames[2] = "IN954CCY";
		tagnames[2] = "IN954CCY";
		fields[2] = fieldIN954CCY = new CharacterField(message,
				HEADERSIZE + 23, 3, "IN954CCY");
		fieldnames[3] = "IN954AMT";
		tagnames[3] = "IN954AMT";
		fields[3] = fieldIN954AMT = new DecimalField(message, HEADERSIZE + 26,
				17, 2, "IN954AMT");
		fieldnames[4] = "IN954APL1";
		tagnames[4] = "IN954APL1";
		fields[4] = fieldIN954APL1 = new CharacterField(message,
				HEADERSIZE + 43, 35, "IN954APL1");
		fieldnames[5] = "IN954BNE1";
		tagnames[5] = "IN954BNE1";
		fields[5] = fieldIN954BNE1 = new CharacterField(message,
				HEADERSIZE + 78, 30, "IN954BNE1");
		fieldnames[6] = "IN954BNE2";
		tagnames[6] = "IN954BNE2";
		fields[6] = fieldIN954BNE2 = new CharacterField(message,
				HEADERSIZE + 108, 30, "IN954BNE2");
		fieldnames[7] = "IN954BNF3";
		tagnames[7] = "IN954BNF3";
		fields[7] = fieldIN954BNF3 = new CharacterField(message,
				HEADERSIZE + 138, 30, "IN954BNF3");
		fieldnames[8] = "IN954DTP1";
		tagnames[8] = "IN954DTP1";
		fields[8] = fieldIN954DTP1 = new CharacterField(message,
				HEADERSIZE + 168, 30, "IN954DTP1");
		fieldnames[9] = "IN954DTP2";
		tagnames[9] = "IN954DTP2";
		fields[9] = fieldIN954DTP2 = new CharacterField(message,
				HEADERSIZE + 198, 30, "IN954DTP2");
	}

	/**
	 * Return value of numeric field IN954AMT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN954AMT() {
		return fieldIN954AMT.getBigDecimal();
	}

	/**
	 * Return value of numeric field IN954DAC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalIN954DAC() {
		return fieldIN954DAC.getBigDecimal();
	}

	/**
	 * Get value of field IN954AMT as a String.
	 */
	public String getIN954AMT() {
		return fieldIN954AMT.getString();
	}

	/**
	 * Get value of field IN954APL1 as a String.
	 */
	public String getIN954APL1() {
		return fieldIN954APL1.getString();
	}

	/**
	 * Get value of field IN954BNE1 as a String.
	 */
	public String getIN954BNE1() {
		return fieldIN954BNE1.getString();
	}

	/**
	 * Get value of field IN954BNE2 as a String.
	 */
	public String getIN954BNE2() {
		return fieldIN954BNE2.getString();
	}

	/**
	 * Get value of field IN954BNF3 as a String.
	 */
	public String getIN954BNF3() {
		return fieldIN954BNF3.getString();
	}

	/**
	 * Get value of field IN954CCY as a String.
	 */
	public String getIN954CCY() {
		return fieldIN954CCY.getString();
	}

	/**
	 * Get value of field IN954DAC as a String.
	 */
	public String getIN954DAC() {
		return fieldIN954DAC.getString();
	}

	/**
	 * Get value of field IN954DTP1 as a String.
	 */
	public String getIN954DTP1() {
		return fieldIN954DTP1.getString();
	}

	/**
	 * Get value of field IN954DTP2 as a String.
	 */
	public String getIN954DTP2() {
		return fieldIN954DTP2.getString();
	}

	/**
	 * Get value of field IN954USR as a String.
	 */
	public String getIN954USR() {
		return fieldIN954USR.getString();
	}

	/**
	 * Set field IN954AMT using a String value.
	 */
	public void setIN954AMT(String newvalue) {
		fieldIN954AMT.setString(newvalue);
	}

	/**
	 * Set numeric field IN954AMT using a BigDecimal value.
	 */
	public void setIN954AMT(BigDecimal newvalue) {
		fieldIN954AMT.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN954APL1 using a String value.
	 */
	public void setIN954APL1(String newvalue) {
		fieldIN954APL1.setString(newvalue);
	}

	/**
	 * Set field IN954BNE1 using a String value.
	 */
	public void setIN954BNE1(String newvalue) {
		fieldIN954BNE1.setString(newvalue);
	}

	/**
	 * Set field IN954BNE2 using a String value.
	 */
	public void setIN954BNE2(String newvalue) {
		fieldIN954BNE2.setString(newvalue);
	}

	/**
	 * Set field IN954BNF3 using a String value.
	 */
	public void setIN954BNF3(String newvalue) {
		fieldIN954BNF3.setString(newvalue);
	}

	/**
	 * Set field IN954CCY using a String value.
	 */
	public void setIN954CCY(String newvalue) {
		fieldIN954CCY.setString(newvalue);
	}

	/**
	 * Set field IN954DAC using a String value.
	 */
	public void setIN954DAC(String newvalue) {
		fieldIN954DAC.setString(newvalue);
	}

	/**
	 * Set numeric field IN954DAC using a BigDecimal value.
	 */
	public void setIN954DAC(BigDecimal newvalue) {
		fieldIN954DAC.setBigDecimal(newvalue);
	}

	/**
	 * Set field IN954DTP1 using a String value.
	 */
	public void setIN954DTP1(String newvalue) {
		fieldIN954DTP1.setString(newvalue);
	}

	/**
	 * Set field IN954DTP2 using a String value.
	 */
	public void setIN954DTP2(String newvalue) {
		fieldIN954DTP2.setString(newvalue);
	}

	/**
	 * Set field IN954USR using a String value.
	 */
	public void setIN954USR(String newvalue) {
		fieldIN954USR.setString(newvalue);
	}
}