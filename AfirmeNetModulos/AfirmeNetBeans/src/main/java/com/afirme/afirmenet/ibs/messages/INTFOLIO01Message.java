package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INTFOLIO01 physical file
 * definition.
 * 
 * File level identifier is 1100517102943. Record format level identifier is
 * 4C1F4452B0BF2.
 */
@SuppressWarnings("rawtypes")
public class INTFOLIO01Message extends MessageRecord {
	final static String fldnames[] = { "INTOPE", "INTUSR", "INTREF",
			"INTFECHA", "INTHORA" };
	final static String tnames[] = { "INTOPE", "INTUSR", "INTREF", "INTFECHA",
			"INTHORA" };
	final static String fid = "1100517102943";
	final static String rid = "4C1F4452B0BF2";
	final static String fmtname = "INTFOLIO01";
	final int FIELDCOUNT = 5;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldINTOPE = null;
	private CharacterField fieldINTUSR = null;
	private CharacterField fieldINTREF = null;
	private DecimalField fieldINTFECHA = null;
	private DecimalField fieldINTHORA = null;

	/**
	 * Constructor for INTFOLIO01Message.
	 */
	public INTFOLIO01Message() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 39;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldINTOPE = new CharacterField(message, HEADERSIZE + 0,
				1, "INTOPE");
		fields[1] = fieldINTUSR = new CharacterField(message, HEADERSIZE + 1,
				10, "INTUSR");
		fields[2] = fieldINTREF = new CharacterField(message, HEADERSIZE + 11,
				12, "INTREF");
		fields[3] = fieldINTFECHA = new DecimalField(message, HEADERSIZE + 23,
				9, 0, "INTFECHA");
		fields[4] = fieldINTHORA = new DecimalField(message, HEADERSIZE + 32,
				7, 0, "INTHORA");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field INTOPE using a String value.
	 */
	public void setINTOPE(String newvalue) {
		fieldINTOPE.setString(newvalue);
	}

	/**
	 * Get value of field INTOPE as a String.
	 */
	public String getINTOPE() {
		return fieldINTOPE.getString();
	}

	/**
	 * Set field INTUSR using a String value.
	 */
	public void setINTUSR(String newvalue) {
		fieldINTUSR.setString(newvalue);
	}

	/**
	 * Get value of field INTUSR as a String.
	 */
	public String getINTUSR() {
		return fieldINTUSR.getString();
	}

	/**
	 * Set field INTREF using a String value.
	 */
	public void setINTREF(String newvalue) {
		fieldINTREF.setString(newvalue);
	}

	/**
	 * Get value of field INTREF as a String.
	 */
	public String getINTREF() {
		return fieldINTREF.getString();
	}

	/**
	 * Set field INTFECHA using a String value.
	 */
	public void setINTFECHA(String newvalue) {
		fieldINTFECHA.setString(newvalue);
	}

	/**
	 * Get value of field INTFECHA as a String.
	 */
	public String getINTFECHA() {
		return fieldINTFECHA.getString();
	}

	/**
	 * Set numeric field INTFECHA using a BigDecimal value.
	 */
	public void setINTFECHA(BigDecimal newvalue) {
		fieldINTFECHA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTFECHA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTFECHA() {
		return fieldINTFECHA.getBigDecimal();
	}

	/**
	 * Set field INTHORA using a String value.
	 */
	public void setINTHORA(String newvalue) {
		fieldINTHORA.setString(newvalue);
	}

	/**
	 * Get value of field INTHORA as a String.
	 */
	public String getINTHORA() {
		return fieldINTHORA.getString();
	}

	/**
	 * Set numeric field INTHORA using a BigDecimal value.
	 */
	public void setINTHORA(BigDecimal newvalue) {
		fieldINTHORA.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field INTHORA as a BigDecimal.
	 */
	public BigDecimal getBigDecimalINTHORA() {
		return fieldINTHORA.getBigDecimal();
	}

}
