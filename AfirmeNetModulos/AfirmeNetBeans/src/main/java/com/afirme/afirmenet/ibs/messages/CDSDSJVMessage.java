package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;
import java.util.Hashtable;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CDSDSJV physical file
 * definition.
 * 
 * File level identifier is 1000802211759. Record format level identifier is
 * 4D5AAFEC55B71.
 */
@SuppressWarnings("rawtypes")
public class CDSDSJVMessage extends MessageRecord {
	final static String fldnames[] = { "CDSUSER", "CDSDEAACC", "CDSDEACCY",
			"CDSDEAMEP", "CDSDEAIPY", "CDSINTMAT", "CDSMATDTE1", "CDSMATDTE2",
			"CDSMATDTE3", "CDSDEARTE", "CDSLSYIPD", "CDSPRDNME", "CDSTRM" };
	final static String tnames[] = { "CDSUSER", "CDSDEAACC", "CDSDEACCY",
			"CDSDEAMEP", "CDSDEAIPY", "CDSINTMAT", "CDSMATDTE1", "CDSMATDTE2",
			"CDSMATDTE3", "CDSDEARTE", "CDSLSYIPD", "CDSPRDNME", "CDSTRM" };
	final static String fid = "1140901111749";
	final static String rid = "36A95C6624740";
	final static String fmtname = "CDSDSJV";
	final int FIELDCOUNT = 13;
	private static Hashtable tlookup = new Hashtable();
	private CharacterField fieldCDSUSER = null;
	private DecimalField fieldCDSDEAACC = null;
	private CharacterField fieldCDSDEACCY = null;
	private DecimalField fieldCDSDEAMEP = null;
	private DecimalField fieldCDSDEAIPY = null;
	private DecimalField fieldCDSINTMAT = null;
	private DecimalField fieldCDSMATDTE1 = null;
	private DecimalField fieldCDSMATDTE2 = null;
	private DecimalField fieldCDSMATDTE3 = null;
	private DecimalField fieldCDSDEARTE = null;
	private DecimalField fieldCDSLSYIPD = null;
	private CharacterField fieldCDSPRDNME = null;
	private CharacterField fieldCDSTRM = null;

	/**
	 * Constructor for CDSDSJVMessage.
	 */
	public CDSDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	@SuppressWarnings("unchecked")
	protected void createFields() {
		recordsize = 181;
		fileid = fid;
		recordid = rid;
		message = new byte[getByteLength()];
		formatname = fmtname;
		fieldnames = fldnames;
		tagnames = tnames;
		fields = new MessageField[FIELDCOUNT];

		fields[0] = fieldCDSUSER = new CharacterField(message, HEADERSIZE + 0,
				10, "CDSUSER");
		fields[1] = fieldCDSDEAACC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "CDSDEAACC");
		fields[2] = fieldCDSDEACCY = new CharacterField(message,
				HEADERSIZE + 23, 3, "CDSDEACCY");
		fields[3] = fieldCDSDEAMEP = new DecimalField(message, HEADERSIZE + 26,
				15, 2, "CDSDEAMEP");
		fields[4] = fieldCDSDEAIPY = new DecimalField(message, HEADERSIZE + 41,
				15, 2, "CDSDEAIPY");
		fields[5] = fieldCDSINTMAT = new DecimalField(message, HEADERSIZE + 56,
				15, 2, "CDSINTMAT");
		fields[6] = fieldCDSMATDTE1 = new DecimalField(message,
				HEADERSIZE + 71, 3, 0, "CDSMATDTE1");
		fields[7] = fieldCDSMATDTE2 = new DecimalField(message,
				HEADERSIZE + 74, 3, 0, "CDSMATDTE2");
		fields[8] = fieldCDSMATDTE3 = new DecimalField(message,
				HEADERSIZE + 77, 3, 0, "CDSMATDTE3");
		fields[9] = fieldCDSDEARTE = new DecimalField(message, HEADERSIZE + 80,
				11, 6, "CDSDEARTE");
		fields[10] = fieldCDSLSYIPD = new DecimalField(message,
				HEADERSIZE + 91, 15, 2, "CDSLSYIPD");
		fields[11] = fieldCDSPRDNME = new CharacterField(message,
				HEADERSIZE + 106, 63, "CDSPRDNME");
		fields[12] = fieldCDSTRM = new CharacterField(message,
				HEADERSIZE + 169, 12, "CDSTRM");

		synchronized (tlookup) {
			if (tlookup.isEmpty()) {
				for (int i = 0; i < tnames.length; i++)
					tlookup.put(tnames[i], new Integer(i));
			}
		}

		taglookup = tlookup;
	}

	/**
	 * Set field CDSUSER using a String value.
	 */
	public void setCDSUSER(String newvalue) {
		fieldCDSUSER.setString(newvalue);
	}

	/**
	 * Get value of field CDSUSER as a String.
	 */
	public String getCDSUSER() {
		return fieldCDSUSER.getString();
	}

	/**
	 * Set field CDSDEAACC using a String value.
	 */
	public void setCDSDEAACC(String newvalue) {
		fieldCDSDEAACC.setString(newvalue);
	}

	/**
	 * Get value of field CDSDEAACC as a String.
	 */
	public String getCDSDEAACC() {
		return fieldCDSDEAACC.getString();
	}

	/**
	 * Set numeric field CDSDEAACC using a BigDecimal value.
	 */
	public void setCDSDEAACC(BigDecimal newvalue) {
		fieldCDSDEAACC.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSDEAACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSDEAACC() {
		return fieldCDSDEAACC.getBigDecimal();
	}

	/**
	 * Set field CDSDEACCY using a String value.
	 */
	public void setCDSDEACCY(String newvalue) {
		fieldCDSDEACCY.setString(newvalue);
	}

	/**
	 * Get value of field CDSDEACCY as a String.
	 */
	public String getCDSDEACCY() {
		return fieldCDSDEACCY.getString();
	}

	/**
	 * Set field CDSDEAMEP using a String value.
	 */
	public void setCDSDEAMEP(String newvalue) {
		fieldCDSDEAMEP.setString(newvalue);
	}

	/**
	 * Get value of field CDSDEAMEP as a String.
	 */
	public String getCDSDEAMEP() {
		return fieldCDSDEAMEP.getString();
	}

	/**
	 * Set numeric field CDSDEAMEP using a BigDecimal value.
	 */
	public void setCDSDEAMEP(BigDecimal newvalue) {
		fieldCDSDEAMEP.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSDEAMEP as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSDEAMEP() {
		return fieldCDSDEAMEP.getBigDecimal();
	}

	/**
	 * Set field CDSDEAIPY using a String value.
	 */
	public void setCDSDEAIPY(String newvalue) {
		fieldCDSDEAIPY.setString(newvalue);
	}

	/**
	 * Get value of field CDSDEAIPY as a String.
	 */
	public String getCDSDEAIPY() {
		return fieldCDSDEAIPY.getString();
	}

	/**
	 * Set numeric field CDSDEAIPY using a BigDecimal value.
	 */
	public void setCDSDEAIPY(BigDecimal newvalue) {
		fieldCDSDEAIPY.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSDEAIPY as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSDEAIPY() {
		return fieldCDSDEAIPY.getBigDecimal();
	}

	/**
	 * Set field CDSINTMAT using a String value.
	 */
	public void setCDSINTMAT(String newvalue) {
		fieldCDSINTMAT.setString(newvalue);
	}

	/**
	 * Get value of field CDSINTMAT as a String.
	 */
	public String getCDSINTMAT() {
		return fieldCDSINTMAT.getString();
	}

	/**
	 * Set numeric field CDSINTMAT using a BigDecimal value.
	 */
	public void setCDSINTMAT(BigDecimal newvalue) {
		fieldCDSINTMAT.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSINTMAT as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSINTMAT() {
		return fieldCDSINTMAT.getBigDecimal();
	}

	/**
	 * Set field CDSMATDTE1 using a String value.
	 */
	public void setCDSMATDTE1(String newvalue) {
		fieldCDSMATDTE1.setString(newvalue);
	}

	/**
	 * Get value of field CDSMATDTE1 as a String.
	 */
	public String getCDSMATDTE1() {
		return fieldCDSMATDTE1.getString();
	}

	/**
	 * Set numeric field CDSMATDTE1 using a BigDecimal value.
	 */
	public void setCDSMATDTE1(BigDecimal newvalue) {
		fieldCDSMATDTE1.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSMATDTE1 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSMATDTE1() {
		return fieldCDSMATDTE1.getBigDecimal();
	}

	/**
	 * Set field CDSMATDTE2 using a String value.
	 */
	public void setCDSMATDTE2(String newvalue) {
		fieldCDSMATDTE2.setString(newvalue);
	}

	/**
	 * Get value of field CDSMATDTE2 as a String.
	 */
	public String getCDSMATDTE2() {
		return fieldCDSMATDTE2.getString();
	}

	/**
	 * Set numeric field CDSMATDTE2 using a BigDecimal value.
	 */
	public void setCDSMATDTE2(BigDecimal newvalue) {
		fieldCDSMATDTE2.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSMATDTE2 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSMATDTE2() {
		return fieldCDSMATDTE2.getBigDecimal();
	}

	/**
	 * Set field CDSMATDTE3 using a String value.
	 */
	public void setCDSMATDTE3(String newvalue) {
		fieldCDSMATDTE3.setString(newvalue);
	}

	/**
	 * Get value of field CDSMATDTE3 as a String.
	 */
	public String getCDSMATDTE3() {
		return fieldCDSMATDTE3.getString();
	}

	/**
	 * Set numeric field CDSMATDTE3 using a BigDecimal value.
	 */
	public void setCDSMATDTE3(BigDecimal newvalue) {
		fieldCDSMATDTE3.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSMATDTE3 as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSMATDTE3() {
		return fieldCDSMATDTE3.getBigDecimal();
	}

	/**
	 * Set field CDSDEARTE using a String value.
	 */
	public void setCDSDEARTE(String newvalue) {
		fieldCDSDEARTE.setString(newvalue);
	}

	/**
	 * Get value of field CDSDEARTE as a String.
	 */
	public String getCDSDEARTE() {
		return fieldCDSDEARTE.getString();
	}

	/**
	 * Set numeric field CDSDEARTE using a BigDecimal value.
	 */
	public void setCDSDEARTE(BigDecimal newvalue) {
		fieldCDSDEARTE.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSDEARTE as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSDEARTE() {
		return fieldCDSDEARTE.getBigDecimal();
	}

	/**
	 * Set field CDSLSYIPD using a String value.
	 */
	public void setCDSLSYIPD(String newvalue) {
		fieldCDSLSYIPD.setString(newvalue);
	}

	/**
	 * Get value of field CDSLSYIPD as a String.
	 */
	public String getCDSLSYIPD() {
		return fieldCDSLSYIPD.getString();
	}

	/**
	 * Set numeric field CDSLSYIPD using a BigDecimal value.
	 */
	public void setCDSLSYIPD(BigDecimal newvalue) {
		fieldCDSLSYIPD.setBigDecimal(newvalue);
	}

	/**
	 * Return value of numeric field CDSLSYIPD as a BigDecimal.
	 */
	public BigDecimal getBigDecimalCDSLSYIPD() {
		return fieldCDSLSYIPD.getBigDecimal();
	}

	/**
	 * Set field CDSPRDNME using a String value.
	 */
	public void setCDSPRDNME(String newvalue) {
		fieldCDSPRDNME.setString(newvalue);
	}

	/**
	 * Get value of field CDSPRDNME as a String.
	 */
	public String getCDSPRDNME() {
		return fieldCDSPRDNME.getString();
	}

	/**
	 * Set field CDSTRM using a String value.
	 */
	public void setCDSTRM(String newvalue) {
		fieldCDSTRM.setString(newvalue);
	}

	/**
	 * Get value of field CDSTRM as a String.
	 */
	public String getCDSTRM() {
		return fieldCDSTRM.getString();
	}
}