package com.afirme.afirmenet.ibs.messages;

import java.math.BigDecimal;

import com.datapro.sockets.CharacterField;
import com.datapro.sockets.DecimalField;
import com.datapro.sockets.MessageField;
import com.datapro.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INCKBDSJV physical file
 * definition.
 * 
 * File level identifier is 1000907103726. Record format level identifier is
 * 394729866629C.
 */

public class INCKBDSJVMessage extends MessageRecord {
	final int FIELDCOUNT = 4;
	private CharacterField fieldDSCKBUSR = null;
	private DecimalField fieldDSCKBACC = null;
	private DecimalField fieldDSCKBNCK = null;
	private DecimalField fieldDSCKBBRN = null;

	/**
	 * Constructor for INCKBDSJVMessage.
	 */
	public INCKBDSJVMessage() {
		createFields();
		initialize();
	}

	/**
	 * Create fields for this message. This method implements the abstract
	 * method in the MessageRecord superclass.
	 */
	protected void createFields() {
		recordsize = 32;
		fileid = "1000907103726";
		recordid = "394729866629C";
		message = new byte[getByteLength()];
		formatname = "INCKBDSJV";
		fieldnames = new String[FIELDCOUNT];
		tagnames = new String[FIELDCOUNT];
		fields = new MessageField[FIELDCOUNT];

		fieldnames[0] = "DSCKBUSR";
		tagnames[0] = "DSCKBUSR";
		fields[0] = fieldDSCKBUSR = new CharacterField(message, HEADERSIZE + 0,
				10, "DSCKBUSR");
		fieldnames[1] = "DSCKBACC";
		tagnames[1] = "DSCKBACC";
		fields[1] = fieldDSCKBACC = new DecimalField(message, HEADERSIZE + 10,
				13, 0, "DSCKBACC");
		fieldnames[2] = "DSCKBNCK";
		tagnames[2] = "DSCKBNCK";
		fields[2] = fieldDSCKBNCK = new DecimalField(message, HEADERSIZE + 23,
				5, 0, "DSCKBNCK");
		fieldnames[3] = "DSCKBBRN";
		tagnames[3] = "DSCKBBRN";
		fields[3] = fieldDSCKBBRN = new DecimalField(message, HEADERSIZE + 28,
				4, 0, "DSCKBBRN");
	}

	/**
	 * Return value of numeric field DSCKBACC as a BigDecimal.
	 */
	public BigDecimal getBigDecimalDSCKBACC() {
		return fieldDSCKBACC.getBigDecimal();
	}

	/**
	 * Return value of numeric field DSCKBBRN as a BigDecimal.
	 */
	public BigDecimal getBigDecimalDSCKBBRN() {
		return fieldDSCKBBRN.getBigDecimal();
	}

	/**
	 * Return value of numeric field DSCKBNCK as a BigDecimal.
	 */
	public BigDecimal getBigDecimalDSCKBNCK() {
		return fieldDSCKBNCK.getBigDecimal();
	}

	/**
	 * Get value of field DSCKBACC as a String.
	 */
	public String getDSCKBACC() {
		return fieldDSCKBACC.getString();
	}

	/**
	 * Get value of field DSCKBBRN as a String.
	 */
	public String getDSCKBBRN() {
		return fieldDSCKBBRN.getString();
	}

	/**
	 * Get value of field DSCKBNCK as a String.
	 */
	public String getDSCKBNCK() {
		return fieldDSCKBNCK.getString();
	}

	/**
	 * Get value of field DSCKBUSR as a String.
	 */
	public String getDSCKBUSR() {
		return fieldDSCKBUSR.getString();
	}

	/**
	 * Set field DSCKBACC using a String value.
	 */
	public void setDSCKBACC(String newvalue) {
		fieldDSCKBACC.setString(newvalue);
	}

	/**
	 * Set numeric field DSCKBACC using a BigDecimal value.
	 */
	public void setDSCKBACC(BigDecimal newvalue) {
		fieldDSCKBACC.setBigDecimal(newvalue);
	}

	/**
	 * Set field DSCKBBRN using a String value.
	 */
	public void setDSCKBBRN(String newvalue) {
		fieldDSCKBBRN.setString(newvalue);
	}

	/**
	 * Set numeric field DSCKBBRN using a BigDecimal value.
	 */
	public void setDSCKBBRN(BigDecimal newvalue) {
		fieldDSCKBBRN.setBigDecimal(newvalue);
	}

	/**
	 * Set field DSCKBNCK using a String value.
	 */
	public void setDSCKBNCK(String newvalue) {
		fieldDSCKBNCK.setString(newvalue);
	}

	/**
	 * Set numeric field DSCKBNCK using a BigDecimal value.
	 */
	public void setDSCKBNCK(BigDecimal newvalue) {
		fieldDSCKBNCK.setBigDecimal(newvalue);
	}

	/**
	 * Set field DSCKBUSR using a String value.
	 */
	public void setDSCKBUSR(String newvalue) {
		fieldDSCKBUSR.setString(newvalue);
	}
}